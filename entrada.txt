void main() {
int val1 = 1;
int val2 = 10;
double val3 = 2021.2020;
println("Probando declaracion de variables");
println(val1 & " " & val2 & " " & val3);
println("---------------------------------");
// COMENTARIO DE UNA LINEA
val1 = val1 + 41 - 123 * 4 / (2 + 2 * 2) - (10 + (125 % 5)) * 2 ^ 2;
val2 = 11 * (11 % (12 + -10)) + 22 / 2;
val3 = 2 ^ (2 * 12 / 6) + 25 / 5/* COMENTARIO
MULTILINEA */;
println("Probando asignación de variables y aritmeticas");
println(val1 & " " & val2 & " " & val3);
println("---------------------------------");
  
boolean rel1 = (((val1 - val2) == 24) && (true && (false || 5 >= 5))) || ((7*7) != (15+555) || -61 > 51);
boolean rel2 = (7*7) <= (15+555) && 1 < 2;
boolean rel3 = ((0 == 0) != ((532 > 532)) == ("Hola" == "Hola")) && (false || (false == true));
println("Probando relacionales y logicas");
println(rel1 & " " & rel2 & " " & rel3);
println("---------------------------------");
  
println("OPERACIONES " & "CON " & "Cadenas"^3);
string hola = "Hola Mundo! ";
string despedida = "Adios mundo :c";
/*println(hola.uppercase() * despedida.lowercase());
println(hola.length());
println(hola.subString(2,4));*/
println("Probando funciones nativas de JOLC");
println("Funciones de operaciones aritmeticas");
val3 = log10(1000) /** log(2, 4)*/;
print("log10(1000) * log(2, 4): ");
println(val3);
println(sin(134) & " " & cos(val1) & " " & tan(12) & " " & sqrt(100));
println("Funciones relacionadas a conversiones");
println(toDouble("3.141516") & " " & toInt("45"));
/*println(boolean.parse("1"));*/
string carnet = "201807394";
println("Hola " & string(carnet));
println(typeof(val1) & " " & typeof(rel1));
println("---------------------------------");

if(true){
  println("If 1");
}

if(true)
	println("If 2");

if(true){
	println("If 2");
}else{
	println("Else If 2");
}

if(true)
	println("If 3");
else{
	println("Else If 3.1");
	println("Else If 3.2");
}

if(true)
	println("If 4");
else
	println("Else If 4");

if(true){
	println("If 5.1");
	println("If 5.2");
}else
	println("Else If 5");

if(true){
	print("If 3");
}else if(false)
	print("Else If 3.1");
    
int valor = 3;
if(valor == 0){
  print(valor);
}else if(valor == 1){
  print(valor);
}else if(valor == 2){
  print(valor);
}else{
  print("Diferente");
}
int valor = 2;
switch(valor){
  case 1:
    print("Es uno");
    break;
  case 2:
    print("Es dos");
  case 3:
    print("Es tres");
  default:
    print("Default");
    break;
}
/*
string valor = "El valor del area es: ";
void area(int base, int altura, string val){
  print(valor);
  println(base*altura);
}
area(10, 5, valor);
*/
int valor1 = 10;
print("valor: $valor1 ");

int v1 = 10;
int v2 = 15;

print("valor: $v1 " & "valor2: $v2");




int var1 = 10;
int var2 = 20;
int a = 100;
int b = 150;
void main(){
    println("Probando Manejo de Entornos");
    println("El valor de var1 global es $a");  //10

    int var1 = 5*5;
    println("El valor de var1 local es $b");  //25

    println("Probando expresiones Arítmeticas");
    println(-25*(69-33*2)+22-32*2-33*(-48+48));   // -117
    println(-93.555+92.12-81.33+19+26-68+-7/(79+11)/86);    // -105.765
    println(8+67+74-1.0*((-86+22)*2)-5*6);  // 247.0
    println((51 % 49) * (9.9+90.1));    // 200.0
    println(0+9*3*(85%(46+95)));    // 2295

    println("Probando expresiones Booleanas y Lógicas");

    println(56 < 48 && 68 >=12 && 62 != 96);    // false
    println((21.0==20.5||95>=94)&&((19<39&&83<=96)||35<97));    // true
    println((68==33||(2<95&&17==37))&&63<=9||12<=42||25==1);    // true

    println("Probando expresiones Arítmeticas, Booleanas y Lógicas");
    if ((true == true && false != false) || true == false)
        println("No entra acá");
    else
        println("Entra acá");

    if (1 == (1 + 1 - (1 * 2 / 2)) && 20.5 == 20.5)
        println("Entra acá");
    else
        println("No entra acá");

    if ("Hola" == "Mundo")
        println("No entra acá");
    else
        println("Entra acá");

    int edad = 62;
    String respuesta = edad < 50 ? "Puede vacunarse" :   edad ==60  ? "Puede vacunarse con riesgo" :   "No puede vacunarse" ;
    println(respuesta);  //No puede vacunarse
}

double operacionMatematica(char operador, double valor1, double valor2){
    switch(operador) {
        case '+':
            return valor1 + valor2;
            break;
        case '-':
            return valor1 - valor2;
            break;
        case '*':
            return valor1 * valor2;
            break;
        case '/':
            return valor1 / valor2;
            break;
        default:
            return 0;
    } 
}
int operacionMatematica1(char operador, int valor1, int valor2){
    switch(operador) {
        case '+':
            return valor1 + valor2;
            break;
        case '-':
            return valor1 - valor2;
            break;
        case '*':
            return valor1 * valor2;
            break;
        case '/':
            return valor1 / valor2;
            break;
        default:
            return 0;
    } 
}
println("El valor de var1 global es $a" & " y el de la funcion es " & operacionMatematica('+',5.6,6.7));  //10
String brr = "hola";
println("suma " & operacionMatematica('+',5.6,6.7) & brr^3);
println("resta " & operacionMatematica('-',-5.6,6.7));
println("multipliacion " & operacionMatematica('*',5.6,6.7));
println("division " & operacionMatematica('/',5.6,6.7));
println("-------------------------------------------");
String animal = "Tigre";
println("---------------------caracterOfPosition----------------------");
println(animal.caracterOfPosition(2)); //g
println("--------------------subString-----------------------");
println(animal.subString(2,4)); //gr
println("-------------------length------------------------");
println(animal.length()); //5
println("-------------------toUppercase------------------------");
println(animal.toUppercase()); //TIGRE
println("------------------toLowercase-------------------------");
println(animal.toLowercase()); //tigre
println("El resultado de 2 + 2 es $(2 + 2)");  // Imprime El resultado de 2 + 2 es 4
println("---------------------int.parse-------------------------------");
println(int.parse("8200"));
println("----------------------double.parse------------------------------");
println(double.parse("3.13159"));
println("-------------------boolean.parse---------------------------------");
println(boolean.parse("1"));
println("--------------------toInt--------------------------------");
println(toInt(3.99999));//3
println("--------------------toDouble--------------------------------");
println(toDouble(operacionMatematica1('+',30,4))); //34.0
println("------------------------string----------------------------");
println(string(45.87));//"45.87"
println("--------------------typeof--------------------------------");
println(typeof(5 * 5));//int
println(typeof(operacionMatematica('*',5.6,6.7)));//double
println(typeof((21.0==20.5||95>=94)&&((19<39&&83<=96)||35<97)));//boool - false
println(typeof(animal));//string
println(typeof(string(45.87)));
println(typeof(toDouble(operacionMatematica1('+',30,4))));
println("-----------------------------MAIN-------------------------------");
//main();
println("-----------------------------METOD-------------------------------");
//Se expresa de la siguiente manera:
println(sin(134));
println(sin(operacionMatematica1('+',30,4)));
println(log10(100));
println(log10(operacionMatematica1('+',30,4)));
println(cos(var1));
println(cos(operacionMatematica1('+',30,4)));
println(tan(12));
println(tan(operacionMatematica1('+',30,4)));
println(sqrt(16));
println(sqrt(operacionMatematica1('+',30,4)));
println(pow(2,16));
/*int ap = 0;
ap = pow(operacionMatematica1('+',30,4),2);*/
println(pow(operacionMatematica1('+',30,4),2));
println("-----------------------------arbolito-------------------------------");
for (int i = 0; i < 10; i++) {
   for (int j = 0; j < 10 - i; j++){
    print(" ");
   }
   for (int k = 0; k < (2 * i + 1); k++){
    print("*");
   }
   println("");
}


//Structs
struct Node{
  int value;
  Node next
};

struct List{
    Node first
};

void insertFirst(list::List, value)
    aux = list.first;
    newNode = Node(value, aux);
    list.first = newNode;
end;

function insertLast(list::List, value)
    aux = list.first;
    while aux.next != nothing
        aux = aux.next;
    end;
    newNode = Node(value, nothing)
    aux.next = newNode
end;

function printList(list::List)
    aux = list.first;
    while(aux != nothing)
        if aux.next == nothing
            println(aux.value);
        else
            print("$(aux.value)->");
        end;
        aux = aux.next;
    end;
end;

lista = List(nothing);
insertFirst(lista, 5);
insertFirst(lista, 4);
insertFirst(lista, 3);
insertFirst(lista, 2);

insertLast(lista, 10);
insertLast(lista, 20);
insertLast(lista, 30);
insertLast(lista, 40);

println("---IMPRIMIR LISTA---");
printList(lista);
println("---FIN IMPRIMIR---");

<<<<<<< HEAD

//Probando structs 1
/*
struct Persona{
	String nombre,
    Persona padre
};
Persona getPadre(Persona actual){
	return actual.padre;
}
void setPadre(Persona soon, Persona father){
	soon.padre = father;
}
Persona persona1 = Persona("Tony", null);
Persona persona2 = Persona("Samuel", null);
setPadre(persona1, persona2);
Persona persona3 = getPadre(persona1);
persona2.nombre = "Daniel";
println(persona2.nombre);
println(persona3.nombre);
*/

//Probando structs 2
/*
struct Persona{
	String nombre,
    Persona padre
};
void addFather(Persona soon, Persona father){
  soon.padre = father;
}
Persona newPerson(String name){
	Persona people = Persona(name, null);
  	return people;
}
Persona persona1 = newPerson("Tony");
Persona persona2 = newPerson("Daniel");
Persona persona3 = newPerson("Samuel");
addFather(persona1, persona2);
addFather(persona2, persona3);
print(persona1.padre.padre.nombre);
*/
=======
int ackerman(int m, int n)
{    
    if (m == 0){
        return n + 1;
    }else if (m > 0 && n == 0){
        return ackerman(m - 1, 1);
    }else{
        return ackerman(m - 1, ackerman(m, n - 1));
    }
}

void hanoi( int discos, int origen, int auxiliar, int destino)
{
    if (discos == 1){
        println("Mover de "& origen & " a "& destino);
    }else{
        hanoi(discos - 1, origen, destino, auxiliar);
        println("Mover de " & origen& " a "& destino);
        hanoi(discos - 1, auxiliar, origen, destino);
    }
}

int factorial(int num)
{
    if (num == 1){
        return 1;
    }else{
        return num * factorial(num - 1);
    }
}

void Main()
{
    println("=====================================================");
    println("===========FUNCIONES RECURSIVAS======================");
    println("=====================================================");
    println("");

    println("==============FACTORIAL==============================");
    println(factorial(5));
    println("===============ACKERMAN==============================");
    println(ackerman(3, 5));
    println("===============HANOI=================================");
    hanoi(3, 1, 2, 3);
}
Main();





println("--------------------------ARBOL AVL----------------");

int index = 0;

struct Nodo {
    int valor;
    int altura;
    Nodo izquierda;
    Nodo derecha;
    int indice;
};


Nodo root = null;


int height(Nodo N){
    if (N == null)
        return 0;

    return N.altura;
}

 int  max(int a,int b){
     if (a > b)
        return a;

    return b;
 }

Nodo rightRotate(Nodo y) {
    Nodo x = y.izquierda;
    Nodo T2 = x.derecha;


    x.derecha = y;
    y.izquierda = T2;

    y.altura = max(height(y.izquierda), height(y.derecha)) + 1;
    x.altura = max(height(x.izquierda), height(x.derecha)) + 1;

    return x;
}



int leftRotate(Nodo x) {
    Nodo y = x.derecha;
    Nodo T2 = y.izquierda;

    y.izquierda = x;
    x.derecha = T2;

    x.altura = max(height(x.izquierda), height(x.derecha)) + 1;
    y.altura = max(height(y.izquierda), height(y.derecha)) + 1;

    return y;
}

int getBalance(Nodo N){ 
    if (N == null)
        return 0;


    return height(N.izquierda) - height(N.derecha);
}

Nodo insert (Nodo node,int key){ 
    
    if (node == null)
        return (Nodo(key,1, nothing, nothing,0));

    if (key < node.valor){
        node.izquierda= insert(node.izquierda, key);
    }elseif (key > node.valor){
        node.derecha = insert(node.derecha, key);
    }else{ 
        return node;
    }

    node.altura = 1 + max(height(node.izquierda), height(node.derecha));

    int balance = getBalance(node);
    Nodo izq = node.izquierda;
  	if (izq!=null){
    	if (balance > 1 && key < izq.valor)
        return rightRotate(node);
        
    	if (balance > 1 && key > izq.valor) {
            node.izquierda = leftRotate(node.izquierda);
            return rightRotate(node);
    	}
    }

    Nodo der =  node.derecha;
  	if (der!=nothing){
        if (balance < -1 && key > der.valor){
            return leftRotate(node);
        }
    	if (balance < -1 && key < der.valor){ 
            node.derecha = rightRotate(node.derecha);
            return leftRotate(node);
        }
  	}
 
    return node;
}

void preOrder (Nodo node){
    if (node != nothing) {
        print(node.valor);
    	print(" ");
        preOrder(node.izquierda);
        preOrder(node.derecha);
    }
}

void indexnodes(Nodo node){

    if(node == nothing){ 
        return;
    }

    node.indice = index;
    index = index + 1;

    if(node.izquierda != nothing){
        indexnodes(node.izquierda);
    }
    if(node.derecha != nothing){
        indexnodes(node.derecha);
    }
}

String graphviz(Nodo node){
    index = 0;
    indexnodes(node);

    println("digraph g{");
    graphnode(node);
    println("}");

    return ("");
}

String graphnode(Nodo node){

    if(node == null) {
        print(""); 
        return "";
    }

    print("node");
    print(node.indice);
    print("[label='");
    print(node.valor);
    println("'];");

    if(node.izquierda != null){
        graphnode(node.izquierda);
        Nodo izq = node.izquierda;
        print("node");
        print(node.indice);
        print(" -> ");
        print("node");
        print(izq.indice);
        println(";");
    }
    if(node.derecha != null){
        graphnode(node.derecha);
        Nodo der = node.derecha;
        print("node");
        print(node.indice);
        print(" -> ");
        print("node");
        print(der.indice);
        println(";");
    }

    return "";
}

void main(){
    root = insert(root, 10);
    root=insert(root,20);
  	println("");
  	root=insert(root,30);
  	root=insert(root,40);
  	root=insert(root,50);
  	root=insert(root,25);
  	root=insert(root,35);
  	root=insert(root,90);
  	root=insert(root,85);
    println("Preorder traversal of constructed tree is : ");
    preOrder(root);
    println("Graphviz");
    graphviz(root);
}

main();
>>>>>>> e8f577ceae59e524beda189acd865b535d755e15
