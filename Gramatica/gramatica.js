/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,5],$V2=[1,25],$V3=[1,35],$V4=[1,22],$V5=[1,23],$V6=[1,26],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,31],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,33],$Vi=[1,34],$Vj=[1,32],$Vk=[2,5,7,24,25,30,33,35,38,68,69,70,71,72,73,80,83,84,89,93,94,95,96,97],$Vl=[1,52],$Vm=[1,54],$Vn=[1,53],$Vo=[1,55],$Vp=[1,56],$Vq=[1,62],$Vr=[1,74],$Vs=[1,72],$Vt=[1,73],$Vu=[1,69],$Vv=[1,68],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[25,38],$VE=[1,89],$VF=[20,40],$VG=[2,32],$VH=[20,29,31,39,40,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,59,60],$VI=[2,5,7,24,25,30,33,35,38,68,69,70,71,72,73,80,82,83,84,89,93,94,95,96,97],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[1,140],$V_=[29,39,40],$V$=[20,29,31,39,40,48,52,53,59,60],$V01=[1,175],$V11=[1,200],$V21=[1,201],$V31=[1,187],$V41=[20,29,31,39,40,43,44,45,46,47,48,50,51,52,53,54,55,56,57,59,60],$V51=[20,29,31,39,40,43,44,48,50,51,52,53,54,55,56,57,59,60],$V61=[20,29,31,39,40,48,50,51,52,53,54,55,56,57,59,60],$V71=[24,40],$V81=[2,103],$V91=[1,220],$Va1=[1,230],$Vb1=[1,231],$Vc1=[24,93,94],$Vd1=[1,253];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCTIO":7,"PRINT":8,"DECLARATION":9,"ASSIGNMENT":10,"SENTENCE_IF":11,"SENTENCE_WHILE":12,"SENTENCE_DO_WHILE":13,"SENTENCE_SWITCH":14,"SENTENCE_FOR":15,"RETUR":16,"BREAKS":17,"CONTINU":18,"CALL_FUNCTION":19,"PTOCOMA":20,"POST_FIXED":21,"TEMPLATE_STRUCT":22,"CREATE_STRUCT":23,"KEYCLS":24,"ID":25,"=":26,"PAROP":27,"L_E":28,"PARCLS":29,"STRUCT":30,"KEYOP":31,"PARAMETERS":32,"Rprint":33,"EXP":34,"Rprintln":35,"TIPO":36,"IDENTIFIERS":37,"COROP":38,"CORCLS":39,"COMA":40,"PARAMETROS":41,"&":42,"+":43,"-":44,"*":45,"/":46,"%":47,"^":48,"!":49,"<":50,">":51,"&&":52,"||":53,"!=":54,"==":55,">=":56,"<=":57,"PRIMITIVO":58,"?":59,"DOSPTOS":60,"nullVal":61,"intVal":62,"doubleVal":63,"charVal":64,"stringVal":65,"trueVal":66,"falseVal":67,"INT":68,"DOUBLE":69,"BOOLEAN":70,"STRING":71,"CHAR":72,"FOR":73,"BLOCK":74,"IN":75,"--":76,"++":77,"CUERPO":78,"BLOCK_IF":79,"IF":80,"ELSE_IF":81,"ELSE":82,"WHILE":83,"DO":84,"FUNCTION":85,"FUNCTION_HEADER":86,"VOID":87,"PARAMETER":88,"SWITCH":89,"BLOCK_SWITCH":90,"L_CASE":91,"CASES":92,"CASE":93,"DEFAULT":94,"BREAK":95,"CONTINUE":96,"RETURN":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FUNCTIO",20:"PTOCOMA",24:"KEYCLS",25:"ID",26:"=",27:"PAROP",29:"PARCLS",30:"STRUCT",31:"KEYOP",33:"Rprint",35:"Rprintln",38:"COROP",39:"CORCLS",40:"COMA",41:"PARAMETROS",42:"&",43:"+",44:"-",45:"*",46:"/",47:"%",48:"^",49:"!",50:"<",51:">",52:"&&",53:"||",54:"!=",55:"==",56:">=",57:"<=",59:"?",60:"DOSPTOS",61:"nullVal",62:"intVal",63:"doubleVal",64:"charVal",65:"stringVal",66:"trueVal",67:"falseVal",68:"INT",69:"DOUBLE",70:"BOOLEAN",71:"STRING",72:"CHAR",73:"FOR",75:"IN",76:"--",77:"++",80:"IF",82:"ELSE",83:"WHILE",84:"DO",87:"VOID",89:"SWITCH",93:"CASE",94:"DEFAULT",95:"BREAK",96:"CONTINUE",97:"RETURN"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[23,8],[22,6],[8,5],[8,5],[9,3],[9,5],[9,5],[9,7],[37,3],[37,1],[10,4],[10,5],[10,8],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[34,1],[34,3],[34,3],[34,4],[34,5],[34,1],[34,1],[28,3],[28,3],[28,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[36,1],[36,1],[36,1],[36,1],[36,1],[15,12],[15,11],[15,9],[15,5],[74,3],[74,2],[21,2],[21,2],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,2],[78,2],[78,2],[79,3],[79,2],[79,1],[11,6],[81,7],[81,2],[81,0],[12,5],[13,7],[85,5],[85,6],[86,1],[86,1],[32,3],[32,1],[88,2],[88,4],[88,2],[19,4],[19,3],[14,5],[90,3],[90,2],[91,2],[91,1],[92,4],[92,3],[92,3],[92,2],[17,2],[18,2],[16,2],[16,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return $$[$0-1];
break;
case 3:
 this.$=$$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 32:
 this.$=[]; this.$.push($$[$0]); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 53: case 54: case 60: case 99: case 102:
 this.$ = $$[$0]; 
break;
case 17: case 18: case 55: case 80: case 97: case 118:
 this.$ = $$[$0-1]; 
break;
case 19: case 20:
 
break;
case 21: case 22: case 95: case 96:
 ErrorList.addError(new ErrorNode(this._$.first_line,this._$.first_column,new ErrorType(EnumErrorType.SYNTACTIC),` Error sintactico `,ENVIRONMENT.NULL)); this.$ = new InstructionError(); 
break;
case 23:
console.log($$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 24:
 console.log($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 25:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2],false); 
break;
case 26:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2],true); 
break;
case 27:
 this.$ = new Declaration($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 28:
 this.$ = new Declaration($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 29:
 this.$ = new Declaration(null, null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 30:
 this.$ = new Declaration(null, null, null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 31:
 this.$=$$[$0-2]; this.$.push($$[$0]); 
break;
case 33:
 this.$ = new Assignation($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 34: case 35: case 36: case 106: case 107:
  
break;
case 37:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.SUM, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.REST, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.MULT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.DIV, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.MOD, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.POT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 43:
 this.$ = new Logic($$[$0], LOGIC_OPERATOR.NOT, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new Aritmetica($$[$0], ARITMETIC_OPERATOR.UMENOS, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MENQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MAYQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 47:
 this.$ = new Logic($$[$0-2], LOGIC_OPERATOR.AND, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 48:
 this.$ = new Logic($$[$0-2], LOGIC_OPERATOR.OR, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 49:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.DIFFERENT , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 50:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.IDENT , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 51:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MAYEQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MENEQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
 this.$ = ($$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 57:
 this.$ = ($$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 58:
 this.$ = ($$[$0-4].toString()+$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 59:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column,ENVIRONMENT.NULL); 
break;
case 61: case 62: case 110:
 this.$=($$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 63: case 108: case 109:
 this.$=$$[$0]; 
break;
case 64:
 this.$ = new Primitive(Type.NULL,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 65:
 this.$ = new Primitive(Type.INT,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new Primitive(Type.DOUBLE,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 67:
 this.$ = new Primitive(Type.CHAR,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 68:
 this.$ = new Primitive(Type.STRING,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 69: case 70:
 this.$ = new Primitive(Type.BOOLEAN,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 71:
 this.$=Type.INT; 
break;
case 72:
 this.$=Type.DOUBLE; 
break;
case 73:
 this.$=Type.BOOLEAN; 
break;
case 74:
 this.$=Type.STRING; 
break;
case 75:
 this.$=Type.CHAR; 
break;
case 76:
 console.log($$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 77:
 console.log($$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 78:
 console.log($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 79:
 console.log($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 81: case 98: case 119:
 this.$ = []; 
break;
case 82: case 83: case 112: case 114:
 this.$=($$[$0-1].toString()+$$[$0].toString()); 
break;
case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93:
  this.$ = $$[$0]; 
break;
case 94:
  this.$ = $$[$0-1],$$[$0]; 
break;
case 100:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 101:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 103:
 this.$ = null; 
break;
case 104:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 105:
 this.$ = new Do(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-2]); 
break;
case 111:
 this.$=$$[$0].toString(); 
break;
case 113:
 this.$=($$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 115:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1],true); 
break;
case 116:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[],true); 
break;
case 117:
 this.$ = new Switch(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 120:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 121:
 this.$ = []; this.$.push($$[$0]); 
break;
case 122:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,$$[$0-2],new Block($$[$0]),true,true);  
break;
case 123:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,$$[$0-1],new Block([]),true,false); 
break;
case 124:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,"",new Block($$[$0]),false,true); 
break;
case 125:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,"",new Block([]),false,false);
break;
case 126:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 127:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 128:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 129:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:$V1,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,25:$V2,30:$V3,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{1:[3]},{2:$V0,5:[1,41],6:42,7:$V1,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,25:$V2,30:$V3,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{1:[2,2]},o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),{20:[1,43]},{20:[1,44]},o($Vk,[2,19]),o($Vk,[2,20]),{20:[1,45],24:[1,46]},{27:[1,47]},{27:[1,48]},{25:[1,50],37:49,38:[1,51]},{25:[1,57],26:$Vl,27:$Vm,38:$Vn,76:$Vo,77:$Vp},{39:[1,58]},{27:[1,59]},{27:[1,60]},{31:$Vq,74:61},{27:[1,63]},{25:[1,65],27:[1,64]},{19:70,20:[1,66],21:75,25:$Vr,27:$Vs,34:67,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{20:[1,83]},{20:[1,84]},{25:[1,85]},o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),{1:[2,1]},o($Vk,[2,3]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,21]),o($Vk,[2,22]),{19:70,21:75,25:$Vr,27:$Vs,34:86,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:87,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{20:[1,88],40:$VE},o($VF,$VG,{26:[1,90]}),{39:[1,91]},{19:70,21:75,25:$Vr,27:$Vs,34:92,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{39:[1,93]},{19:70,21:75,25:$Vr,27:$Vs,28:94,29:[1,95],34:96,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VH,[2,82]),o($VH,[2,83]),{26:[1,97]},{25:[1,98]},{19:70,21:75,25:$Vr,27:$Vs,34:99,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:100,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{83:[1,101]},{2:$V0,4:102,6:4,7:$V1,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,24:[1,103],25:$V2,30:$V3,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{19:70,21:75,25:$Vr,27:$Vs,34:104,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{25:[1,106],36:105,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{75:[1,107]},o($VI,[2,128]),{20:[1,108],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{19:70,21:75,25:$Vr,27:$Vs,34:125,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:126,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VH,[2,53]),o($VH,[2,54]),{19:70,21:75,25:$Vr,27:$Vs,34:127,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,28:128,34:96,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VH,[2,59],{27:$Vm,38:[1,129],76:$Vo,77:$Vp}),o($VH,[2,60]),o($VH,[2,64]),o($VH,[2,65]),o($VH,[2,66]),o($VH,[2,67]),o($VH,[2,68]),o($VH,[2,69]),o($VH,[2,70]),o($VI,[2,126]),o($VI,[2,127]),{31:[1,130]},{29:[1,131],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{29:[1,132],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},o($VI,[2,27]),{25:[1,133]},{19:70,21:75,25:$Vr,27:$Vs,34:134,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{25:[1,136],37:135},{20:[1,137],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{26:[1,138]},{29:[1,139],40:$VZ},o($VH,[2,116]),o($V_,[2,63],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY,60:[1,141]}),{25:[1,142]},{26:[1,143]},{29:[1,144],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{29:[1,145],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{27:[1,146]},{2:$V0,6:42,7:$V1,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,24:[1,147],25:$V2,30:$V3,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VI,[2,81]),{29:[1,148],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{25:[1,149]},{20:[1,151],26:[1,150]},{19:70,21:75,25:$Vr,27:$Vs,34:152,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VI,[2,129]),{19:70,21:75,25:$Vr,27:$Vs,34:153,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:154,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:155,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:156,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:157,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:158,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:159,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:160,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:161,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:162,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:163,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:164,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:165,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:166,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:167,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:168,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($V$,[2,43],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,50:$VQ,51:$VR,54:$VU,55:$VV,56:$VW,57:$VX}),o($VH,[2,44]),{29:[1,169],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{39:[1,170],40:$VZ},{19:70,21:75,25:$Vr,27:$Vs,28:171,34:96,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{25:$V01,32:172,36:174,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,88:173},{20:[1,176]},{20:[1,177]},o($VF,[2,31]),{20:[1,178],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{20:[1,179],40:$VE},o($VF,$VG,{26:[1,180]}),o($VI,[2,33]),{41:[1,181]},o($VH,[2,115]),{19:70,21:75,25:$Vr,27:$Vs,34:182,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:183,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{27:[1,184]},{38:[1,185]},{2:$V11,8:189,9:190,10:191,12:192,13:193,14:194,15:195,16:196,17:197,18:198,19:199,25:$V21,31:$V31,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,78:188,79:186,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{31:$Vq,74:202},{19:70,21:75,25:$Vr,27:$Vs,34:203,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VI,[2,80]),{31:[1,205],90:204},{26:[1,206]},{19:70,21:75,25:$Vr,27:$Vs,34:207,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{19:70,21:75,25:$Vr,27:$Vs,34:208,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{31:$Vq,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY,74:209},o($V41,[2,36],{42:$VJ}),o($V51,[2,37],{42:$VJ,45:$VM,46:$VN,47:$VO}),o($V51,[2,38],{42:$VJ,45:$VM,46:$VN,47:$VO}),o($V41,[2,39],{42:$VJ}),o($V41,[2,40],{42:$VJ}),o($V41,[2,41],{42:$VJ}),o($V$,[2,42],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,50:$VQ,51:$VR,54:$VU,55:$VV,56:$VW,57:$VX}),o($V61,[2,45],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO}),o($V61,[2,46],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO}),o([20,29,31,39,40,52,53,60],[2,47],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY}),o([20,29,31,39,40,53,60],[2,48],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY}),o($V61,[2,49],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO}),o($V61,[2,50],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO}),o($V61,[2,51],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO}),o($V61,[2,52],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO}),{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY,60:[1,210]},o($VH,[2,55]),o($VH,[2,56]),{39:[1,211],40:$VZ},{24:[1,212],40:[1,213]},o($V71,[2,111]),{25:[1,214]},{25:[1,215]},o($VI,[2,25]),o($VI,[2,26]),o($VI,[2,28]),o($VI,[2,29]),{19:70,21:75,25:$Vr,27:$Vs,34:216,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VI,[2,34]),o($V_,[2,61],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY}),o($V_,[2,62],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY}),{19:70,21:75,25:$Vr,27:$Vs,28:217,34:96,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{41:[1,218]},o($Vk,$V81,{81:219,82:$V91}),{2:$V0,4:221,6:4,7:$V1,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,24:[1,222],25:$V2,30:$V3,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VI,[2,99]),o($VI,[2,84]),o($VI,[2,85]),o($VI,[2,86]),o($VI,[2,87]),o($VI,[2,88]),o($VI,[2,89]),o($VI,[2,90]),o($VI,[2,91]),o($VI,[2,92]),o($VI,[2,93]),{20:[1,223]},{20:[1,224],24:[1,225]},{26:$Vl,27:$Vm,38:$Vn},o($VI,[2,104]),{29:[1,226],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},o($VI,[2,117]),{24:[1,228],91:227,92:229,93:$Va1,94:$Vb1},{19:70,21:75,25:$Vr,27:$Vs,34:232,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{20:[1,233],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{20:[1,234],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},o($VI,[2,79]),{19:70,21:75,25:$Vr,27:$Vs,34:235,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($VH,[2,57]),{20:[1,236]},{25:$V01,36:174,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,88:237},o($V71,[2,112],{38:[1,238]}),o($V71,[2,114]),{20:[1,239],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{29:[1,240],40:$VZ},{39:[1,241]},o($Vk,[2,100]),{2:$V11,8:189,9:190,10:191,12:192,13:193,14:194,15:195,16:196,17:197,18:198,19:199,25:$V21,31:$V31,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,78:188,79:243,80:[1,242],83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{2:$V0,6:42,7:$V1,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,24:[1,244],25:$V2,30:$V3,33:$V4,35:$V5,36:24,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VI,[2,98]),o($VI,[2,94]),o($VI,[2,95]),o($VI,[2,96]),{20:[1,245]},{24:[1,246],92:247,93:$Va1,94:$Vb1},o($VI,[2,119]),o($Vc1,[2,121]),{19:70,21:75,25:$Vr,27:$Vs,34:248,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{60:[1,249]},{20:[1,250],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{19:70,21:75,25:$Vr,27:$Vs,34:251,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{21:252,25:$Vd1},o([20,29,31,39,40,52,53,59,60],[2,58],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,54:$VU,55:$VV,56:$VW,57:$VX}),o($Vk,[2,24]),o($V71,[2,110]),{39:[1,254]},o($VI,[2,30]),{20:[1,255]},{20:[1,256]},{27:[1,257]},o($Vk,[2,102]),o($VI,[2,97]),o($VI,[2,105]),o($VI,[2,118]),o($Vc1,[2,120]),{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY,60:[1,258]},o($Vc1,[2,125],{6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,36:24,4:259,2:$V0,7:$V1,25:$V2,30:$V3,33:$V4,35:$V5,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),{19:70,21:75,25:$Vr,27:$Vs,34:260,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},{20:[1,261],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{29:[1,262]},{76:$Vo,77:$Vp},o($V71,[2,113]),o($Vk,[2,23]),o($VI,[2,35]),{19:70,21:75,25:$Vr,27:$Vs,34:263,38:$Vt,44:$Vu,49:$Vv,58:71,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC},o($Vc1,[2,123],{6:4,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,36:24,4:264,2:$V0,7:$V1,25:$V2,30:$V3,33:$V4,35:$V5,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),o($Vc1,[2,124],{8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,36:24,6:42,2:$V0,7:$V1,25:$V2,30:$V3,33:$V4,35:$V5,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),{20:[1,265],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},{21:266,25:$Vd1},{31:$Vq,74:267},{29:[1,268],42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,59:$VY},o($Vc1,[2,122],{8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:18,22:19,23:20,36:24,6:42,2:$V0,7:$V1,25:$V2,30:$V3,33:$V4,35:$V5,38:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,80:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),{21:269,25:$Vd1},{29:[1,270]},o($VI,[2,78]),{31:$Vq,74:271},{29:[1,272]},{31:$Vq,74:273},o($Vk,$V81,{81:274,82:$V91}),{31:$Vq,74:275},o($VI,[2,77]),o($Vk,[2,101]),o($VI,[2,76])],
defaultActions: {3:[2,2],41:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "nullVal";
break;
case 5:return "trueVal";
break;
case 6:return "falseVal";
break;
case 7:return "doubleVal";
break;
case 8:return "intVal";
break;
case 9: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 10: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 11:return "Rprint";
break;
case 12:return "Rprintln";
break;
case 13:return 27;
break;
case 14:return 29;
break;
case 15:return 20;
break;
case 16:return 40;
break;
case 17:return 60;
break;
case 18:return 38;
break;
case 19:return 39;
break;
case 20:return 31;
break;
case 21:return 24;
break;
case 22:return 'PTO';
break;
case 23:return 77;
break;
case 24:return 43;
break;
case 25:return 76;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 48;
break;
case 29:return 46;
break;
case 30:return 47;
break;
case 31:return 59;
break;
case 32:return 56;
break;
case 33:return 51;
break;
case 34:return 57;
break;
case 35:return 50;
break;
case 36:return 55;
break;
case 37:return 54;
break;
case 38:return 26;
break;
case 39:return 52;
break;
case 40:return 42;
break;
case 41:return 53;
break;
case 42:return 49;
break;
case 43:return 71;
break;
case 44:return 69;
break;
case 45:return 68;
break;
case 46:return 87;
break;
case 47:return 70;
break;
case 48:return 'PUSH';
break;
case 49:return 'POP';
break;
case 50:return 'LENGTH';
break;
case 51:return 80;
break;
case 52:return 73;
break;
case 53:return 75;
break;
case 54:return 83;
break;
case 55:return 84;
break;
case 56:return 33;
break;
case 57:return 35;
break;
case 58:return 82;
break;
case 59:return 89;
break;
case 60:return 93;
break;
case 61:return 94;
break;
case 62:return 95;
break;
case 63:return 97;
break;
case 64:return 96;
break;
case 65:return 'TYPEOF';
break;
case 66:return 'TOUPPER';
break;
case 67:return 'TOLOWER';
break;
case 68:return 'CARACTERPOSC';
break;
case 69:return 30
break;
case 70:return 'POW';
break;
case 71:return 'PARSE';
break;
case 72:return 'TOINT';
break;
case 73:return 'TODOUBLE';
break;
case 74:return 'SIN';
break;
case 75:return 'COS';
break;
case 76:return 'TAN';
break;
case 77:return 'SQRT';
break;
case 78:return 'LOG10';
break;
case 79:return 25
break;
case 80:return 5;
break;
case 81: ErrorList.addError(new ErrorNode(yy_.yylloc.first_line,yy_.yylloc.first_column,new ErrorType(EnumErrorType.LEXICO),`El caracter: "${yy_.yytext}" no pertenece al lenguaje`,ENVIRONMENT.NULL)); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+\b)/,/^(?:"((\\")|[^\n\"])*")/,/^(?:'((\\')|[^\n\'])*')/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:typeof\b)/,/^(?:touppercase\b)/,/^(?:tolowercase\b)/,/^(?:caracterOfPosition\b)/,/^(?:struct\b)/,/^(?:pow\b)/,/^(?:parse\b)/,/^(?:toint\b)/,/^(?:todouble\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}