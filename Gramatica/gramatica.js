/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,25],$V2=[1,35],$V3=[1,23],$V4=[1,24],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,34],$V9=[1,39],$Va=[1,40],$Vb=[1,30],$Vc=[1,26],$Vd=[1,29],$Ve=[1,27],$Vf=[1,28],$Vg=[1,32],$Vh=[1,33],$Vi=[1,31],$Vj=[2,5,24,25,30,33,35,68,69,70,71,72,73,74,81,84,88,90,91,92,94,95,96],$Vk=[1,51],$Vl=[1,54],$Vm=[1,56],$Vn=[1,55],$Vo=[1,57],$Vp=[1,58],$Vq=[1,63],$Vr=[1,75],$Vs=[1,73],$Vt=[1,74],$Vu=[1,70],$Vv=[1,69],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,77],$VE=[25,38],$VF=[2,72],$VG=[1,87],$VH=[2,32],$VI=[1,90],$VJ=[2,5,10,24,25,30,33,35,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$VK=[1,91],$VL=[2,5,10,24,25,29,30,31,33,35,39,40,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,59,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$VM=[1,111],$VN=[2,5,24,25,30,33,35,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[1,125],$V_=[1,126],$V$=[1,127],$V01=[1,128],$V11=[1,129],$V21=[1,141],$V31=[1,150],$V41=[29,39,40],$V51=[2,5,10,24,25,29,30,31,33,35,39,40,48,52,53,59,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$V61=[1,185],$V71=[24,29,40],$V81=[2,5,10,24,25,30,33,35,40,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$V91=[1,208],$Va1=[1,209],$Vb1=[1,195],$Vc1=[2,5,10,24,25,29,30,31,33,35,39,40,43,44,45,46,47,48,50,51,52,53,54,55,56,57,59,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$Vd1=[2,5,10,24,25,29,30,31,33,35,39,40,43,44,48,50,51,52,53,54,55,56,57,59,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$Ve1=[2,5,10,24,25,29,30,31,33,35,39,40,48,50,51,52,53,54,55,56,57,59,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],$Vf1=[2,102],$Vg1=[1,226],$Vh1=[1,236],$Vi1=[1,237],$Vj1=[24,88,90],$Vk1=[1,252],$Vl1=[1,254];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCT":7,"PRINT":8,"DECLARATION":9,"PTOCOMA":10,"ASSIGNMENT":11,"SENTENCE_IF":12,"SENTENCE_WHILE":13,"SENTENCE_DO_WHILE":14,"SENTENCE_SWITCH":15,"SENTENCE_FOR":16,"RETUR":17,"BREAKS":18,"CONTINU":19,"CALL_FUNCTION":20,"POST_FIXED":21,"TEMPLATE_STRUCT":22,"CREATE_STRUCT":23,"KEYCLS":24,"ID":25,"=":26,"PAROP":27,"L_E":28,"PARCLS":29,"STRUCT":30,"KEYOP":31,"PARAMETERS":32,"Rprint":33,"EXP":34,"Rprintln":35,"TIPO":36,"IDENTIFIERS":37,"COROP":38,"CORCLS":39,"COMA":40,"PARAMETROS":41,"&":42,"+":43,"-":44,"*":45,"/":46,"%":47,"^":48,"!":49,"<":50,">":51,"&&":52,"||":53,"!=":54,"==":55,">=":56,"<=":57,"PRIMITIVO":58,"?":59,"DOSPTOS":60,"nullVal":61,"intVal":62,"doubleVal":63,"charVal":64,"stringVal":65,"trueVal":66,"falseVal":67,"INT":68,"DOUBLE":69,"BOOLEAN":70,"STRING":71,"CHAR":72,"VOID":73,"FOR":74,"BLOCK":75,"IN":76,"--":77,"++":78,"CUERPO":79,"BLOCK_IF":80,"IF":81,"ELSE_IF":82,"ELSE":83,"SWITCH":84,"BLOCK_SWITCH":85,"L_CASE":86,"CASES":87,"CASE":88,"BLOCK_CASES":89,"DEFAULT":90,"WHILE":91,"DO":92,"PARAMETER":93,"BREAK":94,"CONTINUE":95,"RETURN":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PTOCOMA",24:"KEYCLS",25:"ID",26:"=",27:"PAROP",29:"PARCLS",30:"STRUCT",31:"KEYOP",33:"Rprint",35:"Rprintln",38:"COROP",39:"CORCLS",40:"COMA",41:"PARAMETROS",42:"&",43:"+",44:"-",45:"*",46:"/",47:"%",48:"^",49:"!",50:"<",51:">",52:"&&",53:"||",54:"!=",55:"==",56:">=",57:"<=",59:"?",60:"DOSPTOS",61:"nullVal",62:"intVal",63:"doubleVal",64:"charVal",65:"stringVal",66:"trueVal",67:"falseVal",68:"INT",69:"DOUBLE",70:"BOOLEAN",71:"STRING",72:"CHAR",73:"VOID",74:"FOR",76:"IN",77:"--",78:"++",81:"IF",83:"ELSE",84:"SWITCH",88:"CASE",90:"DEFAULT",91:"WHILE",92:"DO",94:"BREAK",95:"CONTINUE",96:"RETURN"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[23,8],[22,6],[8,5],[8,5],[9,2],[9,4],[9,4],[9,6],[37,3],[37,1],[11,3],[11,5],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[34,1],[34,3],[34,3],[34,4],[34,5],[34,1],[34,1],[28,3],[28,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[16,9],[16,9],[16,9],[16,5],[75,3],[75,2],[21,2],[21,2],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,2],[79,2],[79,2],[80,3],[80,2],[80,1],[12,6],[82,7],[82,2],[82,0],[15,5],[85,3],[85,2],[86,2],[86,1],[87,3],[87,2],[89,2],[89,1],[13,5],[14,7],[7,5],[7,6],[32,3],[32,1],[93,2],[93,2],[20,4],[20,3],[20,4],[18,2],[19,2],[17,2],[17,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return $$[$0-1];
break;
case 3:
 this.$=$$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 32: case 61: case 107:
 this.$=[]; this.$.push($$[$0]); 
break;
case 5: case 6: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 52: case 53: case 59: case 98: case 101: case 110:
 this.$ = $$[$0]; 
break;
case 7: case 8: case 17: case 18: case 54: case 79: case 96: case 104:
 this.$ = $$[$0-1]; 
break;
case 19: case 20:
 
break;
case 21: case 22: case 94: case 95:
 ErrorList.addError(new ErrorNode(this._$.first_line,this._$.first_column,new ErrorType(EnumErrorType.SYNTACTIC),` Error sintactico `,ENVIRONMENT.NULL)); this.$ = new InstructionError(); 
break;
case 23:
console.log($$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 24:
 console.log($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 25:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2],false); 
break;
case 26:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2],true); 
break;
case 27:
 this.$ = new Declaration($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 28:
 this.$ = new Declaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 29:
 this.$ = new Declaration(null, null, null, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 30:
 this.$ = new Declaration(null, null, null, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 31: case 60:
 this.$=$$[$0-2]; this.$.push($$[$0]); 
break;
case 33:
 this.$ = new Assignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 34:
  
break;
case 35:
 this.$ = new Strings($$[$0-2], STRINGS.CONCAT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.SUM, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 37:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.REST, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.MULT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.DIV, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.MOD, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.POT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Logic($$[$0], LOGIC_OPERATOR.NOT, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ = new Aritmetica($$[$0], ARITMETIC_OPERATOR.UMENOS, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MENQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 45:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MAYQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
 this.$ = new Logic($$[$0-2], LOGIC_OPERATOR.AND, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 47:
 this.$ = new Logic($$[$0-2], LOGIC_OPERATOR.OR, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 48:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.DIFFERENT , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 49:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.IDENT , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 50:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MAYEQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 51:
 this.$ = new Relational($$[$0-2], RELATIONAL_OPERATOR.MENEQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = ($$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 56:
 this.$ = ($$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 57:
 this.$ = ($$[$0-4].toString()+$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 58:
 this.$ = new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column,ENVIRONMENT.NULL); 
break;
case 62:
 this.$ = new Primitive(Type.NULL,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
 this.$ = new Primitive(Type.INT,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$ = new Primitive(Type.DOUBLE,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 65:
 this.$ = new Primitive(Type.CHAR,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new Primitive(Type.STRING,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 67: case 68:
 this.$ = new Primitive(Type.BOOLEAN,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 69:
 this.$=Type.INT; 
break;
case 70:
 this.$=Type.DOUBLE; 
break;
case 71:
 this.$=Type.BOOLEAN; 
break;
case 72:
 this.$=Type.STRING; 
break;
case 73:
 this.$=Type.CHAR; 
break;
case 74:
 this.$=Type.NULL; 
break;
case 75: case 76: case 77:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 78:
 this.$ = new ForIn($$[$0-3],$$[$0-1],$$[$0]);
break;
case 80: case 97: case 105: case 111:
 this.$ = []; 
break;
case 81: case 82:
 this.$ = new Post_fixed($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:
  this.$ = $$[$0]; 
break;
case 93:
  this.$ = $$[$0-1],$$[$0]; 
break;
case 99:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 100:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 102:
 this.$ = null; 
break;
case 103:
 this.$ = new Switch($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 106:
 this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 108:
 this.$ = new CaseSwitch($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 109:
 this.$ = new CaseSwitch(null, $$[$0], this._$.first_line, this._$.first_column);
break;
case 112:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 113:
 this.$ = new Do($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 114:
 this.$ =new Function($$[$0-4], $$[$0-3], {}, $$[$0], _$[$0-4].first_line,  _$[$0-4].first_column); 
break;
case 115:
 this.$ =new Function($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line,  _$[$0-5].first_column); 
break;
case 116:
 this.$=$$[$0-2]; this.$[$$[$0].Identifier] = $$[$0]; 
break;
case 117:
 this.$={}; this.$[$$[$0].Identifier] = $$[$0]; 
break;
case 118: case 119:
 this.$={"Identifier":$$[$0], "Type":$$[$0-1]}; 
break;
case 120: case 122:
 this.$ = new CallFunction($$[$0-3], $$[$0-1], _$[$0-3].first_line,  _$[$0-3].first_column); 
break;
case 121:
 this.$ = new CallFunction($$[$0-2], [], _$[$0-2].first_line,  _$[$0-2].first_column); 
break;
case 123:
 this.$ = new Break(_$[$0-1].first_line,  _$[$0-1].first_column); 
break;
case 124:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 125:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 126:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V1,30:$V2,33:$V3,35:$V4,36:22,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},{1:[3]},{2:$V0,5:[1,41],6:42,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,25:$V1,30:$V2,33:$V3,35:$V4,36:22,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},{1:[2,2]},o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),{10:[1,43]},{10:[1,44]},o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),{10:[1,45]},{10:[1,46]},o($Vj,[2,19]),o($Vj,[2,20]),{10:[1,47],24:[1,48]},{25:[1,49],37:50,38:$Vk},{27:[1,52]},{27:[1,53]},{25:[1,59],26:$Vl,27:$Vm,38:$Vn,77:$Vo,78:$Vp},{27:[1,60]},{27:[1,61]},{31:$Vq,75:62},{27:[1,64]},{25:[1,66],27:[1,65]},{10:[1,67],20:71,21:76,25:$Vr,27:$Vs,34:68,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{10:[1,85]},{10:[1,86]},o($VE,$VF,{27:$VG}),{25:[1,88]},o($VE,[2,69]),o($VE,[2,70]),o($VE,[2,71]),o($VE,[2,73]),o($VE,[2,74]),{1:[2,1]},o($Vj,[2,3]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,21]),o($Vj,[2,22]),o([10,40],$VH,{26:$VI,27:[1,89]}),o($VJ,[2,27],{40:$VK}),{39:[1,92]},{20:71,21:76,25:$Vr,27:$Vs,34:93,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:94,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:95,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{39:[1,96]},{20:71,21:76,25:$Vr,27:$Vs,28:97,29:[1,98],34:99,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VL,[2,81]),o($VL,[2,82]),{26:[1,100]},{20:71,21:76,25:$Vr,27:$Vs,34:101,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:102,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{91:[1,103]},{2:$V0,4:104,6:4,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:[1,105],25:$V1,30:$V2,33:$V3,35:$V4,36:22,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},{20:71,21:76,25:$Vr,27:$Vs,34:106,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{9:107,11:108,25:[1,109],36:110,68:$V5,69:$V6,70:$V7,71:$VM,72:$V9,73:$Va},{76:[1,112]},o($VN,[2,125]),{10:[1,113],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{20:71,21:76,25:$Vr,27:$Vs,34:130,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:131,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VL,[2,52]),o($VL,[2,53]),{20:71,21:76,25:$Vr,27:$Vs,34:132,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,28:133,34:99,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VL,[2,58],{27:$Vm,38:[1,134],77:$Vo,78:$Vp}),o($VL,[2,59]),{27:$VG},o($VL,[2,62]),o($VL,[2,63]),o($VL,[2,64]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VN,[2,123]),o($VN,[2,124]),{20:71,21:76,25:$Vr,27:$Vs,28:135,34:99,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{31:[1,136]},{25:$V21,29:[1,137],32:138,36:140,68:$V5,69:$V6,70:$V7,71:$VM,72:$V9,73:$Va,93:139},{20:71,21:76,25:$Vr,27:$Vs,34:142,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{25:[1,143]},{25:[1,145],37:144},{29:[1,146],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{29:[1,147],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},o($VJ,[2,33],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),{26:[1,148]},{29:[1,149],40:$V31},o($VL,[2,121]),o($V41,[2,61],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),{25:[1,151]},{29:[1,152],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{29:[1,153],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{27:[1,154]},{2:$V0,6:42,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:[1,155],25:$V1,30:$V2,33:$V3,35:$V4,36:22,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VN,[2,80]),{29:[1,156],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{10:[1,157]},{10:[1,158]},{10:[1,159],26:$Vl,38:$Vn},{25:[1,160],37:50,38:$Vk},o($VE,$VF),{20:71,21:76,25:$Vr,27:$Vs,34:161,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VN,[2,126]),{20:71,21:76,25:$Vr,27:$Vs,34:162,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:163,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:164,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:165,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:166,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:167,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:168,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:169,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:170,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:171,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:172,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:173,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:174,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:175,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:176,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:177,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($V51,[2,42],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,50:$VV,51:$VW,54:$VZ,55:$V_,56:$V$,57:$V01}),o($VL,[2,43]),{29:[1,178],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{39:[1,179],40:$V31},{20:71,21:76,25:$Vr,27:$Vs,28:180,34:99,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{29:[1,181],40:$V31},{25:$V21,32:182,36:140,68:$V5,69:$V6,70:$V7,71:$VM,72:$V9,73:$Va,93:139},{31:$Vq,75:183},{29:[1,184],40:$V61},o($V71,[2,117]),{25:[1,186]},{25:[1,187]},o($VJ,[2,28],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),o($V81,[2,31]),o($VJ,[2,29],{40:$VK}),o($V81,$VH,{26:[1,188]}),{10:[1,189]},{10:[1,190]},{41:[1,191]},o($VL,[2,120]),{20:71,21:76,25:$Vr,27:$Vs,34:192,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{27:[1,193]},{2:$V91,8:197,9:198,11:199,13:200,14:201,15:202,16:203,17:204,18:205,19:206,20:207,25:$Va1,31:$Vb1,33:$V3,35:$V4,36:110,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,79:196,80:194,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},{31:$Vq,75:210},{20:71,21:76,25:$Vr,27:$Vs,34:211,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VN,[2,79]),{31:[1,213],85:212},{20:71,21:76,25:$Vr,27:$Vs,34:214,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:215,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{20:71,21:76,25:$Vr,27:$Vs,34:216,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($V81,$VH,{26:$VI}),{31:$Vq,42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11,75:217},o($Vc1,[2,35],{42:$VO}),o($Vd1,[2,36],{42:$VO,45:$VR,46:$VS,47:$VT}),o($Vd1,[2,37],{42:$VO,45:$VR,46:$VS,47:$VT}),o($Vc1,[2,38],{42:$VO}),o($Vc1,[2,39],{42:$VO}),o($Vc1,[2,40],{42:$VO}),o($V51,[2,41],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,50:$VV,51:$VW,54:$VZ,55:$V_,56:$V$,57:$V01}),o($Ve1,[2,44],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT}),o($Ve1,[2,45],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT}),o([2,5,10,24,25,29,30,31,33,35,39,40,52,53,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],[2,46],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),o([2,5,10,24,25,29,30,31,33,35,39,40,53,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],[2,47],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),o($Ve1,[2,48],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT}),o($Ve1,[2,49],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT}),o($Ve1,[2,50],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT}),o($Ve1,[2,51],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT}),{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11,60:[1,218]},o($VL,[2,54]),o($VL,[2,55]),{39:[1,219],40:$V31},o($VL,[2,122]),{24:[1,220],40:$V61},o($Vj,[2,114]),{31:$Vq,75:221},{25:$V21,36:140,68:$V5,69:$V6,70:$V7,71:$VM,72:$V9,73:$Va,93:222},o($V71,[2,118]),o($V71,[2,119]),{20:71,21:76,25:$Vr,27:$Vs,34:223,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VN,[2,25]),o($VN,[2,26]),o($VJ,[2,34]),o($V41,[2,60],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),{20:71,21:76,25:$Vr,27:$Vs,28:224,34:99,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($Vj,$Vf1,{82:225,83:$Vg1}),{2:$V0,4:227,6:4,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:[1,228],25:$V1,30:$V2,33:$V3,35:$V4,36:22,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VN,[2,98]),o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88]),o($VN,[2,89]),o($VN,[2,90]),o($VN,[2,91]),o($VN,[2,92]),{10:[1,229]},{10:[1,230],24:[1,231]},{26:$Vl,27:$Vm,38:$Vn},o($VN,[2,112]),{29:[1,232],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},o($VN,[2,103]),{24:[1,234],86:233,87:235,88:$Vh1,90:$Vi1},{10:[1,238],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{10:[1,239],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},{10:[1,240],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},o($VN,[2,78]),{20:71,21:76,25:$Vr,27:$Vs,34:241,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($VL,[2,56]),{10:[1,242]},o($Vj,[2,115]),o($V71,[2,116]),o($VJ,[2,30],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11}),{29:[1,243],40:$V31},o($Vj,[2,99]),{2:$V91,8:197,9:198,11:199,13:200,14:201,15:202,16:203,17:204,18:205,19:206,20:207,25:$Va1,31:$Vb1,33:$V3,35:$V4,36:110,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,79:196,80:245,81:[1,244],84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},{2:$V0,6:42,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:[1,246],25:$V1,30:$V2,33:$V3,35:$V4,36:22,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VN,[2,97]),o($VN,[2,93]),o($VN,[2,94]),o($VN,[2,95]),{10:[1,247]},{24:[1,248],87:249,88:$Vh1,90:$Vi1},o($VN,[2,105]),o($Vj1,[2,107]),{20:71,21:76,25:$Vr,27:$Vs,34:250,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},{60:$Vk1,89:251},{21:253,25:$Vl1},{21:255,25:$Vl1},{21:256,25:$Vl1},o([2,5,10,24,25,29,30,31,33,35,39,40,52,53,59,60,68,69,70,71,72,73,74,81,83,84,88,90,91,92,94,95,96],[2,57],{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,54:$VZ,55:$V_,56:$V$,57:$V01}),o($Vj,[2,24]),{10:[1,257]},{27:[1,258]},o($Vj,[2,101]),o($VN,[2,96]),o($VN,[2,113]),o($VN,[2,104]),o($Vj1,[2,106]),{42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11,60:$Vk1,89:259},o($Vj1,[2,109]),o($Vj1,[2,111],{6:4,7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,36:22,4:260,2:$V0,25:$V1,30:$V2,33:$V3,35:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi}),{29:[1,261]},{77:$Vo,78:$Vp},{29:[1,262]},{29:[1,263]},o($Vj,[2,23]),{20:71,21:76,25:$Vr,27:$Vs,34:264,38:$Vt,44:$Vu,49:$Vv,58:72,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,71:$VD},o($Vj1,[2,108]),o($Vj1,[2,110],{7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,36:22,6:42,2:$V0,25:$V1,30:$V2,33:$V3,35:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,81:$Vc,84:$Vd,91:$Ve,92:$Vf,94:$Vg,95:$Vh,96:$Vi}),{31:$Vq,75:265},{31:$Vq,75:266},{31:$Vq,75:267},{29:[1,268],42:$VO,43:$VP,44:$VQ,45:$VR,46:$VS,47:$VT,48:$VU,50:$VV,51:$VW,52:$VX,53:$VY,54:$VZ,55:$V_,56:$V$,57:$V01,59:$V11},o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,77]),{31:$Vq,75:269},o($Vj,$Vf1,{82:270,83:$Vg1}),o($Vj,[2,100])],
defaultActions: {3:[2,2],41:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "nullVal";
break;
case 5:return "trueVal";
break;
case 6:return "falseVal";
break;
case 7:return "doubleVal";
break;
case 8:return "intVal";
break;
case 9: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 10: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 11:return "Rprint";
break;
case 12:return "Rprintln";
break;
case 13:return 27;
break;
case 14:return 29;
break;
case 15:return 10;
break;
case 16:return 40;
break;
case 17:return 60;
break;
case 18:return 38;
break;
case 19:return 39;
break;
case 20:return 31;
break;
case 21:return 24;
break;
case 22:return 'PTO';
break;
case 23:return 78;
break;
case 24:return 43;
break;
case 25:return 77;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 48;
break;
case 29:return 46;
break;
case 30:return 47;
break;
case 31:return 59;
break;
case 32:return 56;
break;
case 33:return 51;
break;
case 34:return 57;
break;
case 35:return 50;
break;
case 36:return 55;
break;
case 37:return 54;
break;
case 38:return 26;
break;
case 39:return 52;
break;
case 40:return 42;
break;
case 41:return 53;
break;
case 42:return 49;
break;
case 43:return 71;
break;
case 44:return 69;
break;
case 45:return 68;
break;
case 46:return 73;
break;
case 47:return 70;
break;
case 48:return 'PUSH';
break;
case 49:return 'POP';
break;
case 50:return 'LENGTH';
break;
case 51:return 81;
break;
case 52:return 74;
break;
case 53:return 76;
break;
case 54:return 91;
break;
case 55:return 92;
break;
case 56:return 33;
break;
case 57:return 35;
break;
case 58:return 83;
break;
case 59:return 84;
break;
case 60:return 88;
break;
case 61:return 90;
break;
case 62:return 94;
break;
case 63:return 96;
break;
case 64:return 95;
break;
case 65:return 'TOUPPER';
break;
case 66:return 'TOLOWER';
break;
case 67:return 'CARACTERPOSC';
break;
case 68:return 30
break;
case 69:return 'PARSE';
break;
case 70:return 25
break;
case 71:return 5;
break;
case 72: ErrorList.addError(new ErrorNode(yy_.yylloc.first_line,yy_.yylloc.first_column,new ErrorType(EnumErrorType.LEXICO),`El caracter: "${yy_.yytext}" no pertenece al lenguaje`,ENVIRONMENT.NULL)); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+\b)/,/^(?:"((\\")|[^\n\"])*")/,/^(?:'((\\')|[^\n\'])*')/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:touppercase\b)/,/^(?:tolowercase\b)/,/^(?:caracterOfPosition\b)/,/^(?:struct\b)/,/^(?:parse\b)/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}