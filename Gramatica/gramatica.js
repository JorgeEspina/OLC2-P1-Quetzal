/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,20],$V2=[1,21],$V3=[1,23],$V4=[1,24],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,29],$Vb=[1,39],$Vc=[1,26],$Vd=[1,27],$Ve=[1,33],$Vf=[1,28],$Vg=[1,31],$Vh=[1,32],$Vi=[1,30],$Vj=[2,5,21,23,27,29,31,61,62,63,64,65,66,77,78,79,82,87,91,92,93,94,95],$Vk=[1,56],$Vl=[1,60],$Vm=[1,72],$Vn=[1,65],$Vo=[1,73],$Vp=[1,64],$Vq=[1,63],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[2,21],$Vy=[1,75],$Vz=[29,31],$VA=[1,95],$VB=[1,117],$VC=[30,35,71],$VD=[1,119],$VE=[1,120],$VF=[1,121],$VG=[1,122],$VH=[1,123],$VI=[1,124],$VJ=[1,125],$VK=[1,126],$VL=[1,127],$VM=[1,128],$VN=[1,129],$VO=[1,130],$VP=[1,131],$VQ=[1,132],$VR=[2,5,20,21,23,26,27,29,31,32,35,36,37,38,39,40,41,42,43,45,46,47,48,49,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],$VS=[2,21,23,27,29,31,61,62,63,64,65,66,77,78,79,82,87,93,94,95],$VT=[1,151],$VU=[26,32,35],$VV=[2,5,21,23,27,29,31,61,62,63,64,65,66,76,77,78,79,82,87,91,92,93,94,95],$VW=[2,5,20,21,23,26,27,29,31,32,35,36,37,41,42,43,45,46,47,48,49,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],$VX=[2,5,20,21,23,26,27,29,31,32,35,41,43,45,46,47,48,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],$VY=[2,5,20,21,23,26,27,29,31,32,35,41,43,45,46,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],$VZ=[26,35],$V_=[1,221],$V$=[1,222],$V01=[21,91,92],$V11=[1,242],$V21=[1,243],$V31=[26,31,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"FUNCTIO":7,"PRINT":8,"DECLARATION":9,"ASSIGNMENT":10,"SENTENCE_IF":11,"SENTENCE_WHILE":12,"SENTENCE_DO_WHILE":13,"SENTENCE_SWITCH":14,"SENTENCE_FOR":15,"RETUR":16,"BREAKS":17,"CONTINU":18,"CALL_FUNCTION":19,"PTOCOMA":20,"KEYCLS":21,"PUNTO_Y_COMA":22,"Rprint":23,"PAROP":24,"EXP":25,"PARCLS":26,"Rprintln":27,"TIPO":28,"ID":29,"=":30,"COROP":31,"CORCLS":32,"PARAMETROS":33,"PARMETROS":34,"COMA":35,"+":36,"-":37,"*":38,"/":39,"%":40,"&&":41,"<":42,"||":43,"!":44,"!=":45,"==":46,">=":47,">":48,"<=":49,"nullVal":50,"intVal":51,"doubleVal":52,"stringVal":53,"trueVal":54,"falseVal":55,"L_E":56,"?":57,"DOSPTOS":58,"PRIMITIVO":59,"charVal":60,"INT":61,"DOUBLE":62,"BOOLEAN":63,"STRING":64,"CHAR":65,"FOR":66,"L_ID":67,"POST_FIXED":68,"BLOCK":69,"E":70,"IN":71,"KEYOP":72,"--":73,"++":74,"ELSE_IF":75,"ELSE":76,"IF":77,"WHILE":78,"DO":79,"FUNCTION_HEAD":80,"FUNCTION_SENTENCES":81,"FUNCTION":82,"L_PARAMETROS":83,"FUNCTION_SENTENCE":84,"PARAMETRO":85,"L_DIMENSION":86,"SWITCH":87,"BLOCK_SWITCH":88,"L_CASE":89,"CASES":90,"CASE":91,"DEFAULT":92,"BREAK":93,"CONTINUE":94,"RETURN":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PTOCOMA",21:"KEYCLS",23:"Rprint",24:"PAROP",26:"PARCLS",27:"Rprintln",29:"ID",30:"=",31:"COROP",32:"CORCLS",33:"PARAMETROS",35:"COMA",36:"+",37:"-",38:"*",39:"/",40:"%",41:"&&",42:"<",43:"||",44:"!",45:"!=",46:"==",47:">=",48:">",49:"<=",50:"nullVal",51:"intVal",52:"doubleVal",53:"stringVal",54:"trueVal",55:"falseVal",57:"?",58:"DOSPTOS",60:"charVal",61:"INT",62:"DOUBLE",63:"BOOLEAN",64:"STRING",65:"CHAR",66:"FOR",70:"E",71:"IN",72:"KEYOP",73:"--",74:"++",76:"ELSE",77:"IF",78:"WHILE",79:"DO",82:"FUNCTION",87:"SWITCH",91:"CASE",92:"DEFAULT",93:"BREAK",94:"CONTINUE",95:"RETURN"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[22,1],[22,0],[8,5],[8,5],[9,3],[9,5],[9,5],[9,9],[10,4],[10,5],[10,8],[34,3],[34,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,4],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,3],[25,3],[25,5],[56,3],[56,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[28,1],[28,1],[28,1],[28,1],[28,1],[15,12],[15,11],[15,9],[15,5],[67,3],[67,1],[69,3],[69,2],[68,1],[68,1],[11,3],[11,1],[75,7],[75,5],[12,5],[13,7],[7,4],[7,3],[80,4],[80,5],[81,2],[81,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,2],[84,2],[83,3],[83,1],[85,2],[85,3],[86,3],[86,2],[19,5],[19,4],[14,5],[88,3],[88,2],[89,2],[89,1],[90,4],[90,3],[90,2],[90,3],[17,2],[18,2],[16,2],[16,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3: case 4: case 21: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 89: case 90: case 91: case 92: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130:
  
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
   
break;
case 20: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 73: case 74: case 75: case 76: case 87: case 88: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 107: case 108: case 109:
 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,23:$V1,27:$V2,28:22,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,75:25,77:$Vb,78:$Vc,79:$Vd,80:19,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi},{1:[3]},{2:$V0,5:[1,40],6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,23:$V1,27:$V2,28:22,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,75:25,77:$Vb,78:$Vc,79:$Vd,80:19,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi},{1:[2,2]},o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),{20:[1,42],21:[1,43]},{72:[1,44]},{24:[1,45]},{24:[1,46]},{29:[1,47],31:[1,48]},{24:[1,51],30:[1,49],31:[1,50]},{32:[1,52]},o($Vj,[2,84],{76:[1,53]}),{24:[1,54]},{69:55,72:$Vk},{24:[1,57]},{24:[1,58],29:$Vl,67:59},{20:[1,61],24:$Vm,25:62,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($Vj,$Vx,{22:74,20:$Vy}),o($Vj,$Vx,{22:76,20:$Vy}),{29:[1,77]},o($Vz,[2,68]),o($Vz,[2,69]),o($Vz,[2,70]),o($Vz,[2,71]),o($Vz,[2,72]),{26:[1,78]},{1:[2,1]},o($Vj,[2,3]),o($Vj,[2,18]),o($Vj,[2,19]),{2:$VA,7:94,8:82,9:83,10:84,11:85,12:86,13:87,14:88,15:89,16:90,17:91,18:92,19:93,21:[1,80],23:$V1,27:$V2,28:22,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,75:25,77:$Vb,78:$Vc,79:$Vd,80:19,81:79,82:$Ve,84:81,87:$Vf,93:$Vg,94:$Vh,95:$Vi},{24:$Vm,25:96,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:97,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($Vj,$Vx,{22:98,20:$Vy,30:[1,99]}),{32:[1,100]},{24:$Vm,25:101,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{32:[1,102]},{24:$Vm,25:105,26:[1,104],29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:103},{29:[1,106]},{69:107,72:$Vk,77:[1,108]},{24:$Vm,25:109,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{78:[1,110]},{2:$V0,4:111,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:[1,112],23:$V1,27:$V2,28:22,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,75:25,77:$Vb,78:$Vc,79:$Vd,80:19,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi},{24:$Vm,25:113,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{28:114,29:[1,115],61:$V5,62:$V6,63:$V7,64:$V8,65:$V9},{35:$VB,71:[1,116]},o($VC,[2,78]),o($Vj,[2,129]),{20:[1,118],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{24:$Vm,25:133,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:134,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:[1,135]},o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,54]),o($VR,[2,55]),{24:$Vm,25:136,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:105,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:137},o($Vj,[2,127]),o($Vj,[2,20]),o($Vj,[2,128]),{24:[1,138]},{70:[1,139]},{21:[1,140]},o($Vj,[2,90]),{2:$VA,7:94,8:82,9:83,10:84,11:85,12:86,13:87,14:88,15:89,16:90,17:91,18:92,19:93,21:[2,94],23:$V1,27:$V2,28:22,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,75:25,77:$Vb,78:$Vc,79:$Vd,80:19,81:141,82:$Ve,84:81,87:$Vf,93:$Vg,94:$Vh,95:$Vi},o($VS,[2,95]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,107]),{20:[1,142],21:[1,143]},{26:[1,144],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{26:[1,145],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},o($Vj,[2,24]),{24:$Vm,25:146,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{29:[1,147]},o($Vj,$Vx,{22:148,20:$Vy,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ}),{30:[1,149]},{26:[1,150],35:$VT},o($Vj,$Vx,{22:152,20:$Vy}),o($VU,[2,60],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ}),{30:[1,153]},o($Vj,[2,83]),{24:[1,154]},{26:[1,155],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{24:[1,156]},{2:$V0,6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,21:[1,157],23:$V1,27:$V2,28:22,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,75:25,77:$Vb,78:$Vc,79:$Vd,80:19,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi},o($VV,[2,80]),{26:[1,158],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{29:$Vl,67:159},{20:[1,161],30:[1,160]},{24:$Vm,25:162,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{29:[1,163]},o($Vj,[2,130]),{24:$Vm,25:164,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:165,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:166,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:167,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:168,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:169,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:170,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:171,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:172,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:173,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:174,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:175,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:176,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:177,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($VR,[2,41]),o($VR,[2,42]),{24:$Vm,25:181,26:[1,178],29:$Vn,31:$Vo,33:[1,180],34:179,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{26:[1,182],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{32:[1,183],35:$VT},{26:[1,184],28:187,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,83:185,85:186},{26:[1,188]},o($Vj,[2,89]),{21:[2,93]},o($VS,[2,108]),o($VS,[2,109]),o($Vj,$Vx,{22:189,20:$Vy}),o($Vj,$Vx,{22:190,20:$Vy}),o($Vj,$Vx,{22:191,20:$Vy,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ}),o($Vj,$Vx,{22:192,20:$Vy,30:[1,193]}),o($Vj,[2,28]),{33:[1,194]},o($Vj,$Vx,{22:195,20:$Vy}),{24:$Vm,25:196,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($Vj,[2,117]),{31:[1,197]},{24:$Vm,25:198,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{69:199,72:$Vk},{24:$Vm,25:200,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($VV,[2,79]),{72:[1,202],88:201},{30:[1,203],35:$VB},{24:$Vm,25:204,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{24:$Vm,25:205,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ,69:206,72:$Vk},o($VC,[2,77]),o($VW,[2,33],{38:$VF,39:$VG,40:$VH}),o($VW,[2,34],{38:$VF,39:$VG,40:$VH}),o($VR,[2,35]),o($VR,[2,36]),o($VR,[2,37]),o([2,5,20,21,23,26,27,29,31,32,35,41,43,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],[2,38],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,42:$VJ,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o($VX,[2,39],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH}),o([2,5,20,21,23,26,27,29,31,32,35,43,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],[2,40],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP}),o([2,5,20,21,23,26,27,29,31,32,35,41,43,45,57,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],[2,43],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,42:$VJ,46:$VM,47:$VN,48:$VO,49:$VP}),o($VY,[2,44],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,42:$VJ,47:$VN,48:$VO,49:$VP}),o($VY,[2,45],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,42:$VJ,49:$VP}),o($VY,[2,46],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,42:$VJ,49:$VP}),o($VX,[2,47],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH}),{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ,58:[1,207]},o($VR,[2,48]),{26:[1,208]},{35:[1,209]},{26:[2,32],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},o($VR,[2,56]),o($VR,[2,57]),{72:[2,91]},{26:[1,210],35:[1,211]},o($VZ,[2,111]),{29:[1,212]},{69:213,72:$Vk},o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,25]),o($Vj,[2,26]),{31:[1,214]},o($Vj,[2,29]),o($Vj,[2,116]),o($VU,[2,59],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ}),{33:[1,215]},{26:[1,216],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},o($Vj,[2,87]),{26:[1,217],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},o($Vj,[2,118]),{21:[1,219],89:218,90:220,91:$V_,92:$V$},{24:$Vm,25:223,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{20:[1,224],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{20:[1,225],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},o($Vj,[2,76]),{24:$Vm,25:226,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($VR,[2,49]),{33:[1,227]},{72:[2,92]},{28:187,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,85:228},o($VZ,[2,112],{86:229,31:[1,230]}),o($VV,[2,86]),{33:[1,231]},{32:[1,232]},{69:233,72:$Vk},o($Vj,$Vx,{22:234,20:$Vy}),{21:[1,235],90:236,91:$V_,92:$V$},o($Vj,[2,120]),o($V01,[2,122]),{24:$Vm,25:237,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{58:[1,238]},{20:[1,239],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{70:[1,240]},{68:241,73:$V11,74:$V21},o([2,5,20,21,23,26,27,29,31,32,35,58,61,62,63,64,65,66,72,77,78,79,82,87,91,92,93,94,95],[2,58],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ}),{26:[2,31]},o($VZ,[2,110]),o($VZ,[2,113],{31:[1,244]}),{32:[1,245]},{32:[1,246]},o($Vj,$Vx,{22:247,20:$Vy}),o($VV,[2,85]),o($Vj,[2,88]),o($Vj,[2,119]),o($V01,[2,121]),{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ,58:[1,248]},o($V01,[2,125],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,80:19,28:22,75:25,4:249,2:$V0,23:$V1,27:$V2,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,77:$Vb,78:$Vc,79:$Vd,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi}),{24:$Vm,25:250,29:$Vn,31:$Vo,37:$Vp,44:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{20:[1,251]},{26:[1,252]},{26:[2,81]},{26:[2,82]},{32:[1,253]},o($V31,[2,115]),o($Vj,$Vx,{22:254,20:$Vy}),o($Vj,[2,30]),o($V01,[2,124],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,80:19,28:22,75:25,4:255,2:$V0,23:$V1,27:$V2,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,77:$Vb,78:$Vc,79:$Vd,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi}),o($V01,[2,126],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,80:19,28:22,75:25,6:41,2:$V0,23:$V1,27:$V2,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,77:$Vb,78:$Vc,79:$Vd,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi}),{20:[1,256],36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,57:$VQ},{68:257,73:$V11,74:$V21},{69:258,72:$Vk},o($V31,[2,114]),o($Vj,[2,27]),o($V01,[2,123],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,80:19,28:22,75:25,6:41,2:$V0,23:$V1,27:$V2,29:$V3,31:$V4,61:$V5,62:$V6,63:$V7,64:$V8,65:$V9,66:$Va,77:$Vb,78:$Vc,79:$Vd,82:$Ve,87:$Vf,93:$Vg,94:$Vh,95:$Vi}),{68:259,73:$V11,74:$V21},{26:[1,260]},o($Vj,[2,75]),{26:[1,261]},{69:262,72:$Vk},{69:263,72:$Vk},o($Vj,[2,74]),o($Vj,[2,73])],
defaultActions: {3:[2,2],40:[2,1],141:[2,93],184:[2,91],210:[2,92],227:[2,31],242:[2,81],243:[2,82]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
	
	var Consola = [];
	var EntornoGlobal = Entorno(null);
	
	function EjecutarBloque(LINS, ent){
    var retorno = null;
    for(var elemento of LINS){
        switch(elemento.TipoInstruccion){
            case "print":
                var e = Evaluar(elemento.Operacion, ent);
                Consola.push(e.Valor);
                break;
        }
        if(retorno){
            return retorno;
        }
    }
    return null;
  }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "nullVal";
break;
case 5:return "trueVal";
break;
case 6:return "falseVal";
break;
case 7:return "intVal";
break;
case 8:return "doubleVal";
break;
case 9: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 53; 
break;
case 10: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 11:return "Rprint";
break;
case 12:return "Rprintln";
break;
case 13:return 24;
break;
case 14:return 26;
break;
case 15:return 20;
break;
case 16:return 35;
break;
case 17:return 58;
break;
case 18:return 'ASK';
break;
case 19:return 31;
break;
case 20:return 32;
break;
case 21:return 72;
break;
case 22:return 21;
break;
case 23:return 'PTO';
break;
case 24:return 'CONCAT';
break;
case 25:return 74;
break;
case 26:return 36;
break;
case 27:return 73;
break;
case 28:return 37;
break;
case 29:return 38;
break;
case 30:return '^';
break;
case 31:return 39;
break;
case 32:return 40;
break;
case 33:return 47;
break;
case 34:return 48;
break;
case 35:return 49;
break;
case 36:return 42;
break;
case 37:return 46;
break;
case 38:return 45;
break;
case 39:return 30;
break;
case 40:return 41;
break;
case 41:return 43;
break;
case 42:return 44;
break;
case 43:return 64
break;
case 44:return 61;
break;
case 45:return 'VOID';
break;
case 46:return 63;
break;
case 47:return 'PUSH';
break;
case 48:return 'POP';
break;
case 49:return 'LENGTH';
break;
case 50:return 77;
break;
case 51:return 66;
break;
case 52:return 71;
break;
case 53:return 78;
break;
case 54:return 79;
break;
case 55:return 23;
break;
case 56:return 27;
break;
case 57:return 76;
break;
case 58:return 87;
break;
case 59:return 91;
break;
case 60:return 92;
break;
case 61:return 93;
break;
case 62:return 95;
break;
case 63:return 94;
break;
case 64:return 'TYPEOF';
break;
case 65:return 'TOUPPER';
break;
case 66:return 'TOLOWER';
break;
case 67:return 'CARACTERPOSC';
break;
case 68:return 82;
break;
case 69:return 'STRUCT'
break;
case 70:return 'POW';
break;
case 71:return 'PARSE';
break;
case 72:return 'TOINT';
break;
case 73:return 'TODOUBLE';
break;
case 74:return 'SIN';
break;
case 75:return 'COS';
break;
case 76:return 'TAN';
break;
case 77:return 'SQRT';
break;
case 78:return 'LOG10';
break;
case 79:return 5;
break;
case 80: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:&)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:if\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:typeof\b)/i,/^(?:touppercase\b)/i,/^(?:tolowercase\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:function\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:parse\b)/i,/^(?:toint\b)/i,/^(?:todouble\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:sqrt\b)/i,/^(?:log10\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}