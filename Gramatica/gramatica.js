/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,5],$V2=[1,25],$V3=[1,35],$V4=[1,22],$V5=[1,23],$V6=[1,26],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,31],$Vd=[1,41],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,33],$Vi=[1,34],$Vj=[1,32],$Vk=[2,5,19,21,26,31,34,36,39,69,70,71,72,73,74,82,83,84,89,93,94,95,96,97],$Vl=[1,53],$Vm=[1,55],$Vn=[1,54],$Vo=[1,56],$Vp=[1,57],$Vq=[1,63],$Vr=[1,75],$Vs=[1,73],$Vt=[1,74],$Vu=[1,70],$Vv=[1,69],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[26,39],$VE=[1,91],$VF=[18,41],$VG=[2,45],$VH=[18,30,32,40,41,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,61],$VI=[1,116],$VJ=[1,117],$VK=[1,103],$VL=[2,5,19,21,26,31,34,36,39,69,70,71,72,73,74,81,82,83,84,89,93,94,95,96,97],$VM=[1,127],$VN=[1,128],$VO=[1,129],$VP=[1,130],$VQ=[1,131],$VR=[1,132],$VS=[1,133],$VT=[1,134],$VU=[1,135],$VV=[1,136],$VW=[1,137],$VX=[1,138],$VY=[1,139],$VZ=[1,140],$V_=[1,141],$V$=[1,142],$V01=[1,159],$V11=[30,40,41],$V21=[1,199],$V31=[18,30,32,40,41,43,44,45,51,52,53,54,55,56,57,58,60,61],$V41=[18,30,32,40,41,43,44,45,46,47,48,51,52,53,54,55,56,57,58,60,61],$V51=[18,30,32,40,41,52,53,54,55,56,57,60,61],$V61=[18,30,32,40,41,53,54,55,56,60,61],$V71=[19,41],$V81=[1,236],$V91=[1,237],$Va1=[19,93,94],$Vb1=[1,257];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"CUERPO":6,"PRINT":7,"DECLARATION":8,"ASSIGNMENT":9,"SENTENCE_WHILE":10,"SENTENCE_DO_WHILE":11,"SENTENCE_SWITCH":12,"SENTENCE_FOR":13,"RETUR":14,"BREAKS":15,"CONTINU":16,"CALL_FUNCTION":17,"PTOCOMA":18,"KEYCLS":19,"SENTENCE":20,"FUNCTIO":21,"SENTENCE_IF":22,"POST_FIXED":23,"TEMPLATE_STRUCT":24,"CREATE_STRUCT":25,"ID":26,"=":27,"PAROP":28,"L_E":29,"PARCLS":30,"STRUCT":31,"KEYOP":32,"PARAMETERS":33,"Rprint":34,"EXP":35,"Rprintln":36,"TIPO":37,"IDENTIFIERS":38,"COROP":39,"CORCLS":40,"COMA":41,"PARAMETROS":42,"&":43,"+":44,"-":45,"*":46,"/":47,"%":48,"^":49,"!":50,"<":51,">":52,"&&":53,"||":54,"!=":55,"==":56,">=":57,"<=":58,"PRIMITIVO":59,"?":60,"DOSPTOS":61,"nullVal":62,"intVal":63,"doubleVal":64,"charVal":65,"stringVal":66,"trueVal":67,"falseVal":68,"INT":69,"DOUBLE":70,"BOOLEAN":71,"STRING":72,"CHAR":73,"FOR":74,"BLOCK":75,"IN":76,"BLOCK_IF":77,"--":78,"++":79,"ELSE_IF":80,"ELSE":81,"IF":82,"WHILE":83,"DO":84,"FUNCTION":85,"FUNCTION_HEADER":86,"VOID":87,"PARAMETER":88,"SWITCH":89,"BLOCK_SWITCH":90,"L_CASE":91,"CASES":92,"CASE":93,"DEFAULT":94,"BREAK":95,"CONTINUE":96,"RETURN":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PTOCOMA",19:"KEYCLS",21:"FUNCTIO",26:"ID",27:"=",28:"PAROP",30:"PARCLS",31:"STRUCT",32:"KEYOP",34:"Rprint",36:"Rprintln",39:"COROP",40:"CORCLS",41:"COMA",42:"PARAMETROS",43:"&",44:"+",45:"-",46:"*",47:"/",48:"%",49:"^",50:"!",51:"<",52:">",53:"&&",54:"||",55:"!=",56:"==",57:">=",58:"<=",60:"?",61:"DOSPTOS",62:"nullVal",63:"intVal",64:"doubleVal",65:"charVal",66:"stringVal",67:"trueVal",68:"falseVal",69:"INT",70:"DOUBLE",71:"BOOLEAN",72:"STRING",73:"CHAR",74:"FOR",76:"IN",78:"--",79:"++",81:"ELSE",82:"IF",83:"WHILE",84:"DO",87:"VOID",89:"SWITCH",93:"CASE",94:"DEFAULT",95:"BREAK",96:"CONTINUE",97:"RETURN"},
productions_: [0,[3,2],[3,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[4,2],[4,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,2],[20,1],[20,1],[20,2],[20,2],[25,8],[24,6],[7,5],[7,5],[8,3],[8,5],[8,5],[8,7],[38,3],[38,1],[9,4],[9,5],[9,8],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,1],[35,3],[35,3],[35,4],[35,5],[35,1],[35,1],[29,3],[29,3],[29,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[37,1],[37,1],[37,1],[37,1],[37,1],[13,12],[13,11],[13,9],[13,5],[75,3],[75,2],[77,3],[77,2],[77,1],[23,2],[23,2],[22,3],[22,1],[80,7],[80,5],[10,5],[11,7],[85,5],[85,6],[86,1],[86,1],[33,3],[33,1],[88,2],[88,4],[88,2],[17,4],[17,3],[12,5],[90,3],[90,2],[91,2],[91,1],[92,4],[92,3],[92,3],[92,2],[15,2],[16,2],[14,2],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return $$[$0-1];
break;
case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
  this.$ = $$[$0]; 
break;
case 13:
  this.$ = $$[$0-1],$$[$0]; 
break;
case 14: case 15: case 34: case 35:
 ErrorList.addError(new ErrorNode(this._$.first_line,this._$.first_column,new ErrorType(EnumErrorType.SYNTACTIC),` Error sintactico `,ENVIRONMENT.NULL)); this.$ = new InstructionError(); 
break;
case 16:
 this.$=$$[$0-1]; this.$.push($$[$0]); 
break;
case 17: case 45:
 this.$=[]; this.$.push($$[$0]); 
break;
case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29:
 this.$ = $$[$0]; 
break;
case 30: case 31: case 118:
 this.$ = $$[$0-1]; 
break;
case 32: case 33:
 
break;
case 36:
console.log($$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 37:
 console.log($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 38:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2],false); 
break;
case 39:
 this.$ = new Print(this._$.first_line,this._$.first_column,$$[$0-2],true); 
break;
case 40:
 this.$ = new Declaration($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Declaration($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 42:
 this.$ = new Declaration(null, null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 43:
 this.$ = new Declaration(null, null, null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 44:
 this.$=$$[$0-2]; this.$.push($$[$0]); 
break;
case 46:
 this.$ = new Assignation($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 47: case 48: case 49: case 97: case 100: case 101: case 102: case 103: case 106: case 107:
  
break;
case 50:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.SUM, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 51:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.REST, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.MULT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.DIV, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.MOD, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = new Aritmetica($$[$0-2], ARITMETIC_OPERATOR.POT, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
 this.$=new Logic($$[$0], LOGIC_OPERATOR.NOT, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Aritmetica($$[$0-1], ARITMETIC_OPERATOR.UMENOS, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 58:
 this.$=new Relational($$[$0-2], RELATIONAL_OPERATOR.MENQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
 this.$=new Relational($$[$0-2], RELATIONAL_OPERATOR.MAYQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$=new Logic($$[$0-2], LOGIC_OPERATOR.AND, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$=new Logic($$[$0-2], LOGIC_OPERATOR.OR, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$=new Relational($$[$0-2], RELATIONAL_OPERATOR.DIFFERENT , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$=new Relational($$[$0-2], RELATIONAL_OPERATOR.IDENT , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$=new Relational($$[$0-2], RELATIONAL_OPERATOR.MAYEQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
 this.$=new Relational($$[$0-2], RELATIONAL_OPERATOR.MENEQ , $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66: case 67: case 73: case 76: case 108: case 109:
 this.$=$$[$0]; 
break;
case 68:
 this.$=$$[$0-1]; 
break;
case 69: case 74: case 75: case 110:
 this.$=($$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 70: case 113:
 this.$=($$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 71:
 this.$=($$[$0-4].toString()+$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 72:
 this.$= new Identifier($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 77:
 this.$ = new Primitive(Type.NULL,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$ = new Primitive(Type.INT,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 79:
 this.$ = new Primitive(Type.DOUBLE,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 80:
 this.$ = new Primitive(Type.CHAR,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 81:
 this.$ = new Primitive(Type.STRING,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 82: case 83:
 this.$ = new Primitive(Type.BOOLEAN,  $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 84:
 this.$=Type.INT; 
break;
case 85:
 this.$=Type.DOUBLE; 
break;
case 86:
 this.$=Type.BOOLEAN; 
break;
case 87:
 this.$=Type.STRING; 
break;
case 88:
 this.$=Type.CHAR; 
break;
case 89:
 console.log($$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 90:
 console.log($$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 91:
 console.log($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 92:
 console.log($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 93: case 95:
 this.$=$$[$0-2]+$$[$0]; 
break;
case 94: case 96:
 this.$=$$[$0-1]+$$[$0]; 
break;
case 98: case 99: case 112: case 114:
 this.$=($$[$0-1].toString()+$$[$0].toString()); 
break;
case 104:
 this.$ = new While(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 105:
 this.$ = new Do(this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-2]); 
break;
case 111:
 this.$=$$[$0].toString(); 
break;
case 115:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1],true); 
break;
case 116:
 this.$ = new CallFunction(this._$.first_line,this._$.first_column,$$[$0-2],[],true); 
break;
case 117:
 this.$ = new Switch(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); 
break;
case 119:
 this.$ = []; 
break;
case 120:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 121:
 this.$ = []; this.$.push($$[$0]); 
break;
case 122:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,$$[$0-2],new Block($$[$0]),true,true);  
break;
case 123:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,$$[$0-1],new Block([]),true,false); 
break;
case 124:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,"",new Block($$[$0]),false,true); 
break;
case 125:
 this.$ = new CaseSwitch(this._$.first_line,this._$.first_column,"",new Block([]),false,false);
break;
case 126:
 this.$ = new Break(this._$.first_line,this._$.first_column); 
break;
case 127:
 this.$ = new Continue(this._$.first_line,this._$.first_column); 
break;
case 128:
 this.$ = new Return(this._$.first_line,this._$.first_column,null,false); 
break;
case 129:
 this.$ = new Return(this._$.first_line,this._$.first_column,$$[$0-1],true); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,20:4,21:$V1,22:9,23:18,24:19,25:20,26:$V2,31:$V3,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,80:27,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{1:[3]},{2:$V0,5:[1,42],7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,20:43,21:$V1,22:9,23:18,24:19,25:20,26:$V2,31:$V3,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,80:27,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{1:[2,2]},o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),{18:[1,44]},{18:[1,45]},o($Vk,[2,32]),o($Vk,[2,33]),{18:[1,46],19:[1,47]},{28:[1,48]},{28:[1,49]},{26:[1,51],38:50,39:[1,52]},{26:[1,58],27:$Vl,28:$Vm,39:$Vn,78:$Vo,79:$Vp},{40:[1,59]},o($Vk,[2,101],{81:[1,60]}),{28:[1,61]},{32:$Vq,75:62},{28:[1,64]},{26:[1,66],28:[1,65]},{17:71,18:[1,67],23:76,26:$Vr,28:$Vs,35:68,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{18:[1,84]},{18:[1,85]},{26:[1,86]},o($VD,[2,84]),o($VD,[2,85]),o($VD,[2,86]),o($VD,[2,87]),o($VD,[2,88]),{30:[1,87]},{1:[2,1]},o($Vk,[2,16]),o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,34]),o($Vk,[2,35]),{17:71,23:76,26:$Vr,28:$Vs,35:88,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:89,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{18:[1,90],41:$VE},o($VF,$VG,{27:[1,92]}),{40:[1,93]},{17:71,23:76,26:$Vr,28:$Vs,35:94,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{40:[1,95]},{17:71,23:76,26:$Vr,28:$Vs,29:96,30:[1,97],35:98,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VH,[2,98]),o($VH,[2,99]),{27:[1,99]},{26:[1,100]},{2:$VI,6:104,7:105,8:106,9:107,10:108,11:109,12:110,13:111,14:112,15:113,16:114,17:115,26:$VJ,32:$VK,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,77:101,82:[1,102],83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{17:71,23:76,26:$Vr,28:$Vs,35:118,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{83:[1,119]},{2:$V0,4:120,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:[1,121],20:4,21:$V1,22:9,23:18,24:19,25:20,26:$V2,31:$V3,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,80:27,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},{17:71,23:76,26:$Vr,28:$Vs,35:122,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{26:[1,124],37:123,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{76:[1,125]},o($VL,[2,128]),{18:[1,126],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{17:71,23:76,26:$Vr,28:$Vs,35:143,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:144,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VH,[2,66]),o($VH,[2,67]),{17:71,23:76,26:$Vr,28:$Vs,35:145,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,29:146,35:98,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VH,[2,72],{28:$Vm,39:[1,147],78:$Vo,79:$Vp}),o($VH,[2,73]),o($VH,[2,77]),o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,81]),o($VH,[2,82]),o($VH,[2,83]),o($VL,[2,126]),o($VL,[2,127]),{32:[1,148]},{17:71,23:76,26:$Vr,28:$Vs,35:149,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{30:[1,150],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{30:[1,151],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},o($VL,[2,40]),{26:[1,152]},{17:71,23:76,26:$Vr,28:$Vs,35:153,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{26:[1,155],38:154},{18:[1,156],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{27:[1,157]},{30:[1,158],41:$V01},o($VH,[2,116]),o($V11,[2,76],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$,61:[1,160]}),{26:[1,161]},{27:[1,162]},o($Vk,[2,100]),{28:[1,163]},{2:$V0,4:164,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:[1,165],20:4,21:$V1,22:9,23:18,24:19,25:20,26:$V2,31:$V3,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,80:27,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VL,[2,97]),o($VL,[2,3]),o($VL,[2,4]),o($VL,[2,5]),o($VL,[2,6]),o($VL,[2,7]),o($VL,[2,8]),o($VL,[2,9]),o($VL,[2,10]),o($VL,[2,11]),o($VL,[2,12]),{18:[1,166]},{18:[1,167],19:[1,168]},{27:$Vl,28:$Vm,39:$Vn},{30:[1,169],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{28:[1,170]},{2:$V0,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:[1,171],20:43,21:$V1,22:9,23:18,24:19,25:20,26:$V2,31:$V3,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,80:27,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VL,[2,94]),{30:[1,172],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{26:[1,173]},{18:[1,175],27:[1,174]},{17:71,23:76,26:$Vr,28:$Vs,35:176,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VL,[2,129]),{17:71,23:76,26:$Vr,28:$Vs,35:177,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:178,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:179,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:180,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:181,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:182,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:183,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:184,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:185,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:186,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:187,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:188,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:189,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:190,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:191,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:192,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VH,[2,56]),o($VH,[2,57]),{30:[1,193],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{40:[1,194],41:$V01},{17:71,23:76,26:$Vr,28:$Vs,29:195,35:98,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{26:$V21,33:196,37:198,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,88:197},{30:[1,200],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{18:[1,201]},{18:[1,202]},o($VF,[2,44]),{18:[1,203],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{18:[1,204],41:$VE},o($VF,$VG,{27:[1,205]}),o($VL,[2,46]),{42:[1,206]},o($VH,[2,115]),{17:71,23:76,26:$Vr,28:$Vs,35:207,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:208,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{28:[1,209]},{39:[1,210]},{17:71,23:76,26:$Vr,28:$Vs,35:211,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{2:$V0,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:[1,212],20:43,21:$V1,22:9,23:18,24:19,25:20,26:$V2,31:$V3,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,80:27,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VL,[2,96]),o($VL,[2,13]),o($VL,[2,14]),o($VL,[2,15]),{32:$Vq,75:213},{17:71,23:76,26:$Vr,28:$Vs,35:214,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VL,[2,93]),{32:[1,216],90:215},{27:[1,217]},{17:71,23:76,26:$Vr,28:$Vs,35:218,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{17:71,23:76,26:$Vr,28:$Vs,35:219,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{32:$Vq,43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$,75:220},o([18,30,32,40,41,43,51,52,53,54,55,56,57,58,60,61],[2,49],{44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS}),o($V31,[2,50],{46:$VP,47:$VQ,48:$VR,49:$VS}),o($V31,[2,51],{46:$VP,47:$VQ,48:$VR,49:$VS}),o($V41,[2,52],{49:$VS}),o($V41,[2,53],{49:$VS}),o($V41,[2,54],{49:$VS}),o($V41,[2,55],{49:$VS}),o($V51,[2,58],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS}),o($V61,[2,59],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,58:$V_}),o([18,30,32,40,41,53,54,60,61],[2,60],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,55:$VX,56:$VY,57:$VZ,58:$V_}),o([18,30,32,40,41,54,60,61],[2,61],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,55:$VX,56:$VY,57:$VZ,58:$V_}),o([18,30,32,40,41,53,54,55,60,61],[2,62],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,56:$VY,57:$VZ,58:$V_}),o($V61,[2,63],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,57:$VZ,58:$V_}),o($V61,[2,64],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,58:$V_}),o($V51,[2,65],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS}),{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$,61:[1,221]},o($VH,[2,68]),o($VH,[2,69]),{40:[1,222],41:$V01},{19:[1,223],41:[1,224]},o($V71,[2,111]),{26:[1,225]},{26:[1,226]},{2:$VI,6:104,7:105,8:106,9:107,10:108,11:109,12:110,13:111,14:112,15:113,16:114,17:115,26:$VJ,32:$VK,34:$V4,36:$V5,37:24,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,77:227,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VL,[2,38]),o($VL,[2,39]),o($VL,[2,41]),o($VL,[2,42]),{17:71,23:76,26:$Vr,28:$Vs,35:228,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VL,[2,47]),o($V11,[2,74],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$}),o($V11,[2,75],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$}),{17:71,23:76,26:$Vr,28:$Vs,29:229,35:98,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{42:[1,230]},{30:[1,231],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},o($VL,[2,95]),o($VL,[2,104]),{30:[1,232],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},o($VL,[2,117]),{19:[1,234],91:233,92:235,93:$V81,94:$V91},{17:71,23:76,26:$Vr,28:$Vs,35:238,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{18:[1,239],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{18:[1,240],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},o($VL,[2,92]),{17:71,23:76,26:$Vr,28:$Vs,35:241,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},o($VH,[2,70]),{18:[1,242]},{26:$V21,37:198,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,88:243},o($V71,[2,112],{39:[1,244]}),o($V71,[2,114]),o($VL,[2,103]),{18:[1,245],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{30:[1,246],41:$V01},{40:[1,247]},{32:$Vq,75:248},{18:[1,249]},{19:[1,250],92:251,93:$V81,94:$V91},o($VL,[2,119]),o($Va1,[2,121]),{17:71,23:76,26:$Vr,28:$Vs,35:252,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{61:[1,253]},{18:[1,254],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{17:71,23:76,26:$Vr,28:$Vs,35:255,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{23:256,26:$Vb1},o([18,30,32,40,41,61],[2,71],{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$}),o($Vk,[2,37]),o($V71,[2,110]),{40:[1,258]},o($VL,[2,43]),{18:[1,259]},{18:[1,260]},o($VL,[2,102]),o($VL,[2,105]),o($VL,[2,118]),o($Va1,[2,120]),{43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$,61:[1,261]},o($Va1,[2,125],{20:4,7:6,8:7,9:8,22:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,23:18,24:19,25:20,37:24,80:27,4:262,2:$V0,21:$V1,26:$V2,31:$V3,34:$V4,36:$V5,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),{17:71,23:76,26:$Vr,28:$Vs,35:263,39:$Vt,45:$Vu,50:$Vv,59:72,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC},{18:[1,264],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{30:[1,265]},{78:$Vo,79:$Vp},o($V71,[2,113]),o($Vk,[2,36]),o($VL,[2,48]),o($Va1,[2,123],{20:4,7:6,8:7,9:8,22:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,23:18,24:19,25:20,37:24,80:27,4:266,2:$V0,21:$V1,26:$V2,31:$V3,34:$V4,36:$V5,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),o($Va1,[2,124],{7:6,8:7,9:8,22:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,23:18,24:19,25:20,37:24,80:27,20:43,2:$V0,21:$V1,26:$V2,31:$V3,34:$V4,36:$V5,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),{18:[1,267],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,51:$VT,52:$VU,53:$VV,54:$VW,55:$VX,56:$VY,57:$VZ,58:$V_,60:$V$},{23:268,26:$Vb1},{32:$Vq,75:269},o($Va1,[2,122],{7:6,8:7,9:8,22:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,23:18,24:19,25:20,37:24,80:27,20:43,2:$V0,21:$V1,26:$V2,31:$V3,34:$V4,36:$V5,39:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,82:$Vd,83:$Ve,84:$Vf,89:$Vg,95:$Vh,96:$Vi,97:$Vj}),{23:270,26:$Vb1},{30:[1,271]},o($VL,[2,91]),{30:[1,272]},{32:$Vq,75:273},{32:$Vq,75:274},o($VL,[2,90]),o($VL,[2,89])],
defaultActions: {3:[2,2],42:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "nullVal";
break;
case 5:return "trueVal";
break;
case 6:return "falseVal";
break;
case 7:return "doubleVal";
break;
case 8:return "intVal";
break;
case 9: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 10: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 11:return "Rprint";
break;
case 12:return "Rprintln";
break;
case 13:return 28;
break;
case 14:return 30;
break;
case 15:return 18;
break;
case 16:return 41;
break;
case 17:return 61;
break;
case 18:return 39;
break;
case 19:return 40;
break;
case 20:return 32;
break;
case 21:return 19;
break;
case 22:return 'PTO';
break;
case 23:return 79;
break;
case 24:return 44;
break;
case 25:return 78;
break;
case 26:return 45;
break;
case 27:return 46;
break;
case 28:return 49;
break;
case 29:return 47;
break;
case 30:return 48;
break;
case 31:return 60;
break;
case 32:return 57;
break;
case 33:return 52;
break;
case 34:return 58;
break;
case 35:return 51;
break;
case 36:return 56;
break;
case 37:return 55;
break;
case 38:return 27;
break;
case 39:return 53;
break;
case 40:return 43;
break;
case 41:return 54;
break;
case 42:return 50;
break;
case 43:return 72;
break;
case 44:return 70;
break;
case 45:return 69;
break;
case 46:return 87;
break;
case 47:return 71;
break;
case 48:return 'PUSH';
break;
case 49:return 'POP';
break;
case 50:return 'LENGTH';
break;
case 51:return 82;
break;
case 52:return 74;
break;
case 53:return 76;
break;
case 54:return 83;
break;
case 55:return 84;
break;
case 56:return 34;
break;
case 57:return 36;
break;
case 58:return 81;
break;
case 59:return 89;
break;
case 60:return 93;
break;
case 61:return 94;
break;
case 62:return 95;
break;
case 63:return 97;
break;
case 64:return 96;
break;
case 65:return 'TYPEOF';
break;
case 66:return 'TOUPPER';
break;
case 67:return 'TOLOWER';
break;
case 68:return 'CARACTERPOSC';
break;
case 69:return 31
break;
case 70:return 'POW';
break;
case 71:return 'PARSE';
break;
case 72:return 'TOINT';
break;
case 73:return 'TODOUBLE';
break;
case 74:return 'SIN';
break;
case 75:return 'COS';
break;
case 76:return 'TAN';
break;
case 77:return 'SQRT';
break;
case 78:return 'LOG10';
break;
case 79:return 26
break;
case 80:return 5;
break;
case 81: ErrorList.addError(new ErrorNode(yy_.yylloc.first_line,yy_.yylloc.first_column,new ErrorType(EnumErrorType.LEXICO),`El caracter: "${yy_.yytext}" no pertenece al lenguaje`,ENVIRONMENT.NULL)); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+\b)/,/^(?:"((\\")|[^\n\"])*")/,/^(?:'((\\')|[^\n\'])*')/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:if\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:typeof\b)/,/^(?:touppercase\b)/,/^(?:tolowercase\b)/,/^(?:caracterOfPosition\b)/,/^(?:struct\b)/,/^(?:pow\b)/,/^(?:parse\b)/,/^(?:toint\b)/,/^(?:todouble\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}