/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,5],$V2=[1,23],$V3=[1,20],$V4=[1,21],$V5=[1,24],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,29],$Vc=[1,38],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[1,31],$Vh=[1,32],$Vi=[1,30],$Vj=[2,5,20,23,25,34,36,39,69,70,71,72,73,74,82,84,85,90,94,95,96,97,98],$Vk=[1,50],$Vl=[1,52],$Vm=[1,51],$Vn=[1,53],$Vo=[1,54],$Vp=[1,59],$Vq=[1,71],$Vr=[1,69],$Vs=[1,70],$Vt=[1,66],$Vu=[1,65],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[25,39],$VD=[1,86],$VE=[18,41],$VF=[2,41],$VG=[18,29,32,40,41,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,61],$VH=[1,110],$VI=[1,97],$VJ=[2,5,20,23,25,34,36,39,69,70,71,72,73,74,81,82,84,85,90,94,95,96,97,98],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,125],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[1,130],$VV=[1,131],$VW=[1,132],$VX=[1,133],$VY=[1,134],$VZ=[1,135],$V_=[1,151],$V$=[29,40,41],$V01=[18,29,32,40,41,43,44,45,51,52,53,54,55,56,57,58,60,61],$V11=[18,29,32,40,41,43,44,45,46,47,48,51,52,53,54,55,56,57,58,60,61],$V21=[18,29,32,40,41,52,53,54,55,56,57,60,61],$V31=[18,29,32,40,41,53,54,55,56,60,61],$V41=[1,215],$V51=[1,216],$V61=[23,94,95],$V71=[1,232];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"CUERPO":6,"PRINT":7,"DECLARATION":8,"ASSIGNMENT":9,"SENTENCE_WHILE":10,"SENTENCE_DO_WHILE":11,"SENTENCE_SWITCH":12,"SENTENCE_FOR":13,"RETUR":14,"BREAKS":15,"CONTINU":16,"CALL_FUNCTION":17,"PTOCOMA":18,"SENTENCE":19,"FUNCTIO":20,"SENTENCE_IF":21,"POST_FIXED":22,"KEYCLS":23,"CREATE_STRUCT":24,"ID":25,"=":26,"PAROP":27,"L_E":28,"PARCLS":29,"TEMPLATE_STRUCT":30,"STRUCT":31,"KEYOP":32,"PARAMETERS":33,"Rprint":34,"EXP":35,"Rprintln":36,"TIPO":37,"IDENTIFIERS":38,"COROP":39,"CORCLS":40,"COMA":41,"PARAMETROS":42,"&":43,"+":44,"-":45,"*":46,"/":47,"%":48,"^":49,"!":50,"<":51,">":52,"&&":53,"||":54,"!=":55,"==":56,">=":57,"<=":58,"PRIMITIVO":59,"?":60,"DOSPTOS":61,"nullVal":62,"intVal":63,"doubleVal":64,"charVal":65,"stringVal":66,"trueVal":67,"falseVal":68,"INT":69,"DOUBLE":70,"BOOLEAN":71,"STRING":72,"CHAR":73,"FOR":74,"BLOCK":75,"IN":76,"BLOCK_IF":77,"--":78,"++":79,"ELSE_IF":80,"ELSE":81,"IF":82,"ELSEIF":83,"WHILE":84,"DO":85,"FUNCTION":86,"FUNCTION_HEADER":87,"VOID":88,"PARAMETER":89,"SWITCH":90,"BLOCK_SWITCH":91,"L_CASE":92,"CASES":93,"CASE":94,"DEFAULT":95,"BREAK":96,"CONTINUE":97,"RETURN":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PTOCOMA",20:"FUNCTIO",23:"KEYCLS",25:"ID",26:"=",27:"PAROP",29:"PARCLS",31:"STRUCT",32:"KEYOP",34:"Rprint",36:"Rprintln",39:"COROP",40:"CORCLS",41:"COMA",42:"PARAMETROS",43:"&",44:"+",45:"-",46:"*",47:"/",48:"%",49:"^",50:"!",51:"<",52:">",53:"&&",54:"||",55:"!=",56:"==",57:">=",58:"<=",60:"?",61:"DOSPTOS",62:"nullVal",63:"intVal",64:"doubleVal",65:"charVal",66:"stringVal",67:"trueVal",68:"falseVal",69:"INT",70:"DOUBLE",71:"BOOLEAN",72:"STRING",73:"CHAR",74:"FOR",76:"IN",78:"--",79:"++",81:"ELSE",82:"IF",84:"WHILE",85:"DO",88:"VOID",90:"SWITCH",94:"CASE",95:"DEFAULT",96:"BREAK",97:"CONTINUE",98:"RETURN"},
productions_: [0,[3,2],[3,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[4,2],[4,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[19,2],[19,2],[24,8],[30,6],[7,5],[7,5],[8,3],[8,5],[8,5],[8,7],[38,3],[38,1],[9,4],[9,5],[9,8],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,1],[35,3],[35,3],[35,4],[35,5],[35,1],[35,1],[28,3],[28,3],[28,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[37,1],[37,1],[37,1],[37,1],[37,1],[13,12],[13,11],[13,9],[13,5],[75,3],[75,2],[77,3],[77,2],[77,1],[22,2],[22,2],[21,3],[21,1],[80,7],[80,5],[83,1],[83,1],[10,5],[11,7],[86,5],[86,6],[87,1],[87,1],[33,3],[33,1],[89,2],[89,4],[89,2],[17,4],[17,3],[12,5],[91,3],[91,2],[92,2],[92,1],[93,4],[93,3],[93,2],[93,3],[15,2],[16,2],[14,2],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return $$[$0-1];
break;
case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
  this.$ = $$[$0]; 
break;
case 13:
  this.$ = $$[$0-1],$$[$0]; 
break;
case 14: case 15: case 43: case 44: case 93: case 96: case 97: case 98: case 99: case 100: case 101: case 104: case 105: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127:
  
break;
case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27:
 this.$ = $$[$0]; 
break;
case 28: case 29:
 this.$ = $$[$0-1]; 
break;
case 30: case 31:
 ErrorList.addError(new ErrorNode(this._$.first_line,this._$.first_column,new ErrorType(EnumErrorType.SYNTACTIC),` Error sintactico `,new EnvironmentType(EnumEnvironmentType.NULL, ""))); this.$ = new InstructionError(); 
break;
case 32:
console.log($$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 33:
 console.log($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 34: case 35: case 88:
 console.log($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 36:
 console.log($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 37: case 38: case 102:
 console.log($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 39: case 103:
 console.log($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 40: case 50: case 51: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 64: case 65: case 70: case 71: case 108: case 114:
 this.$=($$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 41: case 68: case 109:
 this.$=$$[$0].toString(); 
break;
case 42:
 console.log($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 45: case 46: case 47: case 48: case 49:
 this.$=($$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString(),  newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)); 
break;
case 52: case 53: case 94: case 95: case 110: case 112:
 this.$=($$[$0-1].toString()+$$[$0].toString()); 
break;
case 62: case 63: case 69: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 106: case 107:
 this.$=$$[$0]; 
break;
case 66: case 111: case 113:
 this.$=($$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 67:
 this.$=($$[$0-4].toString()+$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()); 
break;
case 85:
 console.log($$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 86:
 console.log($$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 87:
 console.log($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 89: case 91:
 this.$=$$[$0-2]+$$[$0]; 
break;
case 90: case 92:
 this.$=$$[$0-1]+$$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:4,20:$V1,21:9,22:18,25:$V2,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,80:25,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},{1:[3]},{2:$V0,5:[1,39],7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:40,20:$V1,21:9,22:18,25:$V2,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,80:25,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},{1:[2,2]},o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),{18:[1,41]},{18:[1,42]},{18:[1,43],23:[1,44]},{27:[1,45]},{27:[1,46]},{25:[1,48],38:47,39:[1,49]},{26:$Vk,27:$Vl,39:$Vm,78:$Vn,79:$Vo},{40:[1,55]},o($Vj,[2,97],{81:[1,56]}),{27:[1,57]},{32:$Vp,75:58},{27:[1,60]},{25:[1,62],27:[1,61]},{17:67,18:[1,63],22:72,25:$Vq,27:$Vr,35:64,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{18:[1,80]},{18:[1,81]},o($VC,[2,80]),o($VC,[2,81]),o($VC,[2,82]),o($VC,[2,83]),o($VC,[2,84]),{29:[1,82]},{1:[2,1]},o($Vj,[2,14]),o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),o($Vj,[2,31]),{17:67,22:72,25:$Vq,27:$Vr,35:83,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:84,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{18:[1,85],41:$VD},o($VE,$VF,{26:[1,87]}),{40:[1,88]},{17:67,22:72,25:$Vq,27:$Vr,35:89,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{40:[1,90]},{17:67,22:72,25:$Vq,27:$Vr,28:91,29:[1,92],35:93,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VG,[2,94]),o($VG,[2,95]),{25:[1,94]},{6:98,7:99,8:100,9:101,10:102,11:103,12:104,13:105,14:106,15:107,16:108,17:109,25:$VH,32:$VI,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,77:95,82:[1,96],84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},{17:67,22:72,25:$Vq,27:$Vr,35:111,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{84:[1,112]},{2:$V0,4:113,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:4,20:$V1,21:9,22:18,23:[1,114],25:$V2,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,80:25,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},{17:67,22:72,25:$Vq,27:$Vr,35:115,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{25:[1,117],37:116,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va},{76:[1,118]},o($VJ,[2,126]),{18:[1,119],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{17:67,22:72,25:$Vq,27:$Vr,35:136,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:137,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VG,[2,62]),o($VG,[2,63]),{17:67,22:72,25:$Vq,27:$Vr,35:138,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,28:139,35:93,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VG,[2,68],{27:$Vl,39:[1,140],78:$Vn,79:$Vo}),o($VG,[2,69]),o($VG,[2,73]),o($VG,[2,74]),o($VG,[2,75]),o($VG,[2,76]),o($VG,[2,77]),o($VG,[2,78]),o($VG,[2,79]),o($VJ,[2,124]),o($VJ,[2,125]),{17:67,22:72,25:$Vq,27:$Vr,35:141,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{29:[1,142],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{29:[1,143],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},o($VJ,[2,36]),{25:[1,144]},{17:67,22:72,25:$Vq,27:$Vr,35:145,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{25:[1,147],38:146},{18:[1,148],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{26:[1,149]},{29:[1,150],41:$V_},o($VG,[2,114]),o($V$,[2,72],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ,61:[1,152]}),{26:[1,153]},o($Vj,[2,96]),{27:[1,154]},{2:$V0,4:155,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:4,20:$V1,21:9,22:18,23:[1,156],25:$V2,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,80:25,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},o($VJ,[2,93]),o($VJ,[2,3]),o($VJ,[2,4]),o($VJ,[2,5]),o($VJ,[2,6]),o($VJ,[2,7]),o($VJ,[2,8]),o($VJ,[2,9]),o($VJ,[2,10]),o($VJ,[2,11]),o($VJ,[2,12]),{18:[1,157]},{26:$Vk,27:$Vl,39:$Vm},{29:[1,158],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{27:[1,159]},{2:$V0,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:40,20:$V1,21:9,22:18,23:[1,160],25:$V2,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,80:25,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},o($VJ,[2,90]),{29:[1,161],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{25:[1,162]},{18:[1,164],26:[1,163]},{17:67,22:72,25:$Vq,27:$Vr,35:165,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VJ,[2,127]),{17:67,22:72,25:$Vq,27:$Vr,35:166,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:167,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:168,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:169,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:170,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:171,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:172,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:173,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:174,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:175,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:176,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:177,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:178,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:179,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:180,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:181,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VG,[2,52]),o($VG,[2,53]),{29:[1,182],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{40:[1,183],41:$V_},{17:67,22:72,25:$Vq,27:$Vr,28:184,35:93,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{29:[1,185],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{18:[1,186]},{18:[1,187]},o($VE,[2,40]),{18:[1,188],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{18:[1,189],41:$VD},o($VE,$VF,{26:[1,190]}),o($VJ,[2,42]),{42:[1,191]},o($VG,[2,113]),{17:67,22:72,25:$Vq,27:$Vr,35:192,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:193,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{39:[1,194]},{17:67,22:72,25:$Vq,27:$Vr,35:195,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$V0,7:6,8:7,9:8,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,19:40,20:$V1,21:9,22:18,23:[1,196],25:$V2,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,80:25,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},o($VJ,[2,92]),o($VJ,[2,13]),{32:$Vp,75:197},{17:67,22:72,25:$Vq,27:$Vr,35:198,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VJ,[2,89]),{32:[1,200],91:199},{26:[1,201]},{17:67,22:72,25:$Vq,27:$Vr,35:202,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{17:67,22:72,25:$Vq,27:$Vr,35:203,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{32:$Vp,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ,75:204},o([18,29,32,40,41,43,51,52,53,54,55,56,57,58,60,61],[2,45],{44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),o($V01,[2,46],{46:$VN,47:$VO,48:$VP,49:$VQ}),o($V01,[2,47],{46:$VN,47:$VO,48:$VP,49:$VQ}),o($V11,[2,48],{49:$VQ}),o($V11,[2,49],{49:$VQ}),o($V11,[2,50],{49:$VQ}),o($V11,[2,51],{49:$VQ}),o($V21,[2,54],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),o($V31,[2,55],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,58:$VY}),o([18,29,32,40,41,53,54,60,61],[2,56],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,55:$VV,56:$VW,57:$VX,58:$VY}),o([18,29,32,40,41,54,60,61],[2,57],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,55:$VV,56:$VW,57:$VX,58:$VY}),o([18,29,32,40,41,53,54,55,60,61],[2,58],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,56:$VW,57:$VX,58:$VY}),o($V31,[2,59],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,57:$VX,58:$VY}),o($V31,[2,60],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,58:$VY}),o($V21,[2,61],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ,61:[1,205]},o($VG,[2,64]),o($VG,[2,65]),{40:[1,206],41:$V_},{6:98,7:99,8:100,9:101,10:102,11:103,12:104,13:105,14:106,15:107,16:108,17:109,25:$VH,32:$VI,34:$V3,36:$V4,37:22,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,77:207,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi},o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,37]),o($VJ,[2,38]),{17:67,22:72,25:$Vq,27:$Vr,35:208,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VJ,[2,43]),o($V$,[2,70],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ}),o($V$,[2,71],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ}),{42:[1,209]},{29:[1,210],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},o($VJ,[2,91]),o($VJ,[2,102]),{29:[1,211],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},o($VJ,[2,115]),{23:[1,213],92:212,93:214,94:$V41,95:$V51},{17:67,22:72,25:$Vq,27:$Vr,35:217,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{18:[1,218],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{18:[1,219],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},o($VJ,[2,88]),{17:67,22:72,25:$Vq,27:$Vr,35:220,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VG,[2,66]),o($VJ,[2,99]),{18:[1,221],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{40:[1,222]},{32:$Vp,75:223},{18:[1,224]},{23:[1,225],93:226,94:$V41,95:$V51},o($VJ,[2,117]),o($V61,[2,119]),{17:67,22:72,25:$Vq,27:$Vr,35:227,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{61:[1,228]},{18:[1,229],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{17:67,22:72,25:$Vq,27:$Vr,35:230,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{22:231,25:$V71},o([18,29,32,40,41,61],[2,67],{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ}),o($VJ,[2,39]),{18:[1,233]},o($VJ,[2,98]),o($VJ,[2,103]),o($VJ,[2,116]),o($V61,[2,118]),{43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ,61:[1,234]},o($V61,[2,122],{19:4,7:6,8:7,9:8,21:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,22:18,37:22,80:25,4:235,2:$V0,20:$V1,25:$V2,34:$V3,36:$V4,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi}),{17:67,22:72,25:$Vq,27:$Vr,35:236,39:$Vs,45:$Vt,50:$Vu,59:68,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{18:[1,237],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{29:[1,238]},{78:$Vn,79:$Vo},o($VJ,[2,44]),o($V61,[2,121],{19:4,7:6,8:7,9:8,21:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,22:18,37:22,80:25,4:239,2:$V0,20:$V1,25:$V2,34:$V3,36:$V4,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi}),o($V61,[2,123],{7:6,8:7,9:8,21:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,22:18,37:22,80:25,19:40,2:$V0,20:$V1,25:$V2,34:$V3,36:$V4,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi}),{18:[1,240],43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY,60:$VZ},{22:241,25:$V71},{32:$Vp,75:242},o($V61,[2,120],{7:6,8:7,9:8,21:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,22:18,37:22,80:25,19:40,2:$V0,20:$V1,25:$V2,34:$V3,36:$V4,39:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:$Va,74:$Vb,82:$Vc,84:$Vd,85:$Ve,90:$Vf,96:$Vg,97:$Vh,98:$Vi}),{22:243,25:$V71},{29:[1,244]},o($VJ,[2,87]),{29:[1,245]},{32:$Vp,75:246},{32:$Vp,75:247},o($VJ,[2,86]),o($VJ,[2,85])],
defaultActions: {3:[2,2],39:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "nullVal";
break;
case 5:return "trueVal";
break;
case 6:return "falseVal";
break;
case 7:return "doubleVal";
break;
case 8:return "intVal";
break;
case 9: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 10: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 11:return "Rprint";
break;
case 12:return "Rprintln";
break;
case 13:return 27;
break;
case 14:return 29;
break;
case 15:return 18;
break;
case 16:return 41;
break;
case 17:return 61;
break;
case 18:return 39;
break;
case 19:return 40;
break;
case 20:return 32;
break;
case 21:return 23;
break;
case 22:return 'PTO';
break;
case 23:return 79;
break;
case 24:return 44;
break;
case 25:return 78;
break;
case 26:return 45;
break;
case 27:return 46;
break;
case 28:return 49;
break;
case 29:return 47;
break;
case 30:return 48;
break;
case 31:return 60;
break;
case 32:return 57;
break;
case 33:return 52;
break;
case 34:return 58;
break;
case 35:return 51;
break;
case 36:return 56;
break;
case 37:return 55;
break;
case 38:return 26;
break;
case 39:return 53;
break;
case 40:return 43;
break;
case 41:return 54;
break;
case 42:return 50;
break;
case 43:return 72;
break;
case 44:return 70;
break;
case 45:return 69;
break;
case 46:return 88;
break;
case 47:return 71;
break;
case 48:return 'PUSH';
break;
case 49:return 'POP';
break;
case 50:return 'LENGTH';
break;
case 51:return 82;
break;
case 52:return 74;
break;
case 53:return 76;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 34;
break;
case 57:return 36;
break;
case 58:return 81;
break;
case 59:return 90;
break;
case 60:return 94;
break;
case 61:return 95;
break;
case 62:return 96;
break;
case 63:return 98;
break;
case 64:return 97;
break;
case 65:return 'TYPEOF';
break;
case 66:return 'TOUPPER';
break;
case 67:return 'TOLOWER';
break;
case 68:return 'CARACTERPOSC';
break;
case 69:return 31
break;
case 70:return 'POW';
break;
case 71:return 'PARSE';
break;
case 72:return 'TOINT';
break;
case 73:return 'TODOUBLE';
break;
case 74:return 'SIN';
break;
case 75:return 'COS';
break;
case 76:return 'TAN';
break;
case 77:return 'SQRT';
break;
case 78:return 'LOG10';
break;
case 79:return 25
break;
case 80:return 5;
break;
case 81: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:if\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:typeof\b)/i,/^(?:touppercase\b)/i,/^(?:tolowercase\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:struct\b)/i,/^(?:pow\b)/i,/^(?:parse\b)/i,/^(?:toint\b)/i,/^(?:todouble\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:sqrt\b)/i,/^(?:log10\b)/i,/^(?:([A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}